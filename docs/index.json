[
  {
    "description": "In music.kit an chord is a list of notes or intervals ordered\nby pitch\n\nThe `chord` module has functions to create and manipulate chord",
    "tags": [
      {
        "title": "example",
        "description": "var kit = require('music.kit')\nkit.chord('1 3 5 6', 'G') // => ['G', 'B', 'D', 'E']\nkit.chord.get('Cmaj7') // => ['C', 'E', 'G', 'B']",
        "lineNumber": 6
      },
      {
        "title": "name",
        "name": "chord"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 13,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.chord/index.js",
      "code": "'use strict'\n\n/**\n * In music.kit an chord is a list of notes or intervals ordered\n * by pitch\n *\n * The `chord` module has functions to create and manipulate chord\n *\n * @example\n * var kit = require('music.kit')\n * kit.chord('1 3 5 6', 'G') // => ['G', 'B', 'D', 'E']\n * kit.chord.get('Cmaj7') // => ['C', 'E', 'G', 'B']\n */\nvar chord = require('./chord')\nchord.build = require('./build')\nchord.names = require('./names')\nchord.type = require('./type')\n\nif (typeof module === 'object' && module.exports) module.exports = chord\nif (typeof window !== 'undefined') window.chord = chord\n"
    },
    "examples": [
      "<span class=\"hljs-keyword\">var</span> kit = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.kit'</span>)\nkit.chord(<span class=\"hljs-string\">'1 3 5 6'</span>, <span class=\"hljs-string\">'G'</span>) <span class=\"hljs-comment\">// =&gt; ['G', 'B', 'D', 'E']</span>\nkit.chord.get(<span class=\"hljs-string\">'Cmaj7'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'E', 'G', 'B']</span>"
    ],
    "name": "chord",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "chord"
    ]
  },
  {
    "description": "Get a chord by name using a dictionary.\n\nThere is two ways to get a chord:\n\n- With type and tonic: `chord.chord('Maj7', 'C')`\n- With tonic included in name: `chord.chord('CMaj7')`\n\nTo get chord intervals use  `false` as tonic\n\nThis function can be partially applied (see examples)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 12,
        "name": "chord"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 13,
        "name": null
      },
      {
        "title": "param",
        "description": "the chord name (optionally can include the tonic)",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      },
      {
        "title": "returns",
        "description": "a data object with the chord properties",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      },
      {
        "title": "example",
        "description": "var chord = require('music.chord')\n// with name and tonic\nchord('Maj7', 'C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n// with tonic inside the name\nchord('C major') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n// partially applied\nvar major = chord('major')\nmajor('C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']",
        "lineNumber": 18
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 32,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 33,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.chord/chord.js",
      "code": "'use strict'\n\nvar chords = require('./dictionary')\nvar dictionary = require('tonal.dictionary')\n\n/**\n * Get a chord by name using a dictionary.\n *\n * There is two ways to get a chord:\n *\n * - With type and tonic: `chord.chord('Maj7', 'C')`\n * - With tonic included in name: `chord.chord('CMaj7')`\n *\n * To get chord intervals use  `false` as tonic\n *\n * This function can be partially applied (see examples)\n *\n * @name chord\n * @function\n * @param {String} name - the chord name (optionally can include the tonic)\n * @return {Object} a data object with the chord properties\n *\n * @example\n * var chord = require('music.chord')\n * // with name and tonic\n * chord('Maj7', 'C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n * // with tonic inside the name\n * chord('C major') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n * // partially applied\n * var major = chord('major')\n * major('C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n */\nmodule.exports = dictionary.getter(chords)\n"
    },
    "name": "chord",
    "params": [
      {
        "title": "param",
        "description": "the chord name (optionally can include the tonic)",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "a data object with the chord properties",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> chord = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.chord'</span>)\n<span class=\"hljs-comment\">// with name and tonic</span>\nchord(<span class=\"hljs-string\">'Maj7'</span>, <span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E', 'F', 'G', 'A', 'B']</span>\n<span class=\"hljs-comment\">// with tonic inside the name</span>\nchord(<span class=\"hljs-string\">'C major'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E', 'F', 'G', 'A', 'B']</span>\n<span class=\"hljs-comment\">// partially applied</span>\n<span class=\"hljs-keyword\">var</span> major = chord(<span class=\"hljs-string\">'major'</span>)\nmajor(<span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E', 'F', 'G', 'A', 'B']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "chord"
    ]
  },
  {
    "description": "Create a chord from a source and a tonic. A chord is a list of notes or\nintervals in asceding pitch order\n\nThe source can be a list of intervals or notes. The tonic must be\na pitch (with or without octave) or false to get the intervals\n\nThis function is currified, so you can partially apply the function passing\none parameter instead of two (see example)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 10,
        "name": "chord.build"
      },
      {
        "title": "param",
        "description": "the list of intervals or notes",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "source"
      },
      {
        "title": "param",
        "description": "the tonic of the chord or null to get the intervals",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "tonic"
      },
      {
        "title": "returns",
        "description": "the chord notes (or intervals if null tonic)",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var chord = require('music.chord')\nchord.build('1 3 5 6', 'G') // => ['G', 'B', 'D', 'E']\n// partially applied:\nvar maj79 = chord.build('C E G B D')\nmaj79('A4') // => ['A4', 'C#5', 'E5', 'G#5', 'B5']",
        "lineNumber": 15
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 25,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.chord/build.js",
      "code": "var harmonics = require('tonal.gamut/harmonics')\nvar transpose = require('tonal.transpose')\n\n/**\n * Create a chord from a source and a tonic. A chord is a list of notes or\n * intervals in asceding pitch order\n *\n * The source can be a list of intervals or notes. The tonic must be\n * a pitch (with or without octave) or false to get the intervals\n *\n * This function is currified, so you can partially apply the function passing\n * one parameter instead of two (see example)\n *\n * @name chord.build\n * @param {Array} source - the list of intervals or notes\n * @param {String} tonic - the tonic of the chord or null to get the intervals\n * @return {Array} the chord notes (or intervals if null tonic)\n *\n * @example\n * var chord = require('music.chord')\n * chord.build('1 3 5 6', 'G') // => ['G', 'B', 'D', 'E']\n * // partially applied:\n * var maj79 = chord.build('C E G B D')\n * maj79('A4') // => ['A4', 'C#5', 'E5', 'G#5', 'B5']\n */\nmodule.exports = function (notes, tonic) {\n  var h = harmonics(notes)\n  return h.map(transpose(tonic))\n}\n"
    },
    "name": "chord.build",
    "params": [
      {
        "title": "param",
        "description": "the list of intervals or notes",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "source"
      },
      {
        "title": "param",
        "description": "the tonic of the chord or null to get the intervals",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "tonic"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the chord notes (or intervals if null tonic)",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> chord = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.chord'</span>)\nchord.build(<span class=\"hljs-string\">'1 3 5 6'</span>, <span class=\"hljs-string\">'G'</span>) <span class=\"hljs-comment\">// =&gt; ['G', 'B', 'D', 'E']</span>\n<span class=\"hljs-comment\">// partially applied:</span>\n<span class=\"hljs-keyword\">var</span> maj79 = chord.build(<span class=\"hljs-string\">'C E G B D'</span>)\nmaj79(<span class=\"hljs-string\">'A4'</span>) <span class=\"hljs-comment\">// =&gt; ['A4', 'C#5', 'E5', 'G#5', 'B5']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "chord.build"
    ]
  },
  {
    "description": "A chord dictionary",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "chord.dictionary"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the chord name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      },
      {
        "title": "see",
        "description": "dictionary/dictionary",
        "lineNumber": 7
      },
      {
        "title": "example",
        "description": "var chords = require('music.chord/dictionary')\nchords('Maj7') // => { name: 'Maj7', intervals: ['1', '3', ...], aliases: [] }",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 17,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.chord/dictionary.js",
      "code": "'use strict'\n\nvar data = require('./chords.json')\nvar dictionary = require('tonal.dictionary')\n\n/**\n * A chord dictionary\n *\n * @name chord.dictionary\n * @function\n * @param {String} name - the chord name\n * @see dictionary/dictionary\n *\n * @example\n * var chords = require('music.chord/dictionary')\n * chords('Maj7') // => { name: 'Maj7', intervals: ['1', '3', ...], aliases: [] }\n */\nmodule.exports = dictionary(data)\n"
    },
    "name": "chord.dictionary",
    "params": [
      {
        "title": "param",
        "description": "the chord name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> chords = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.chord/dictionary'</span>)\nchords(<span class=\"hljs-string\">'Maj7'</span>) <span class=\"hljs-comment\">// =&gt; { name: 'Maj7', intervals: ['1', '3', ...], aliases: [] }</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "chord.dictionary"
    ]
  },
  {
    "description": "Given a list of notes get the chord names",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "chord.names"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the chord notes",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "notes"
      },
      {
        "title": "returns",
        "description": "an array of chord names or all known chord names if no arguments provided",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var chord = require('music.chord')\nchord.names() // => ['Maj7', 'm7', ... ] (109 names)\nchord.names('D E F G A B C') [ 'D dorian' ]\nchord.names('D E F G A B C') [ 'D dorian' ]",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.chord/names.js",
      "code": "'use strict'\n\nvar names = require('tonal.dictionary/names')\nvar chords = require('./dictionary')\n\n/**\n * Given a list of notes get the chord names\n *\n * @name chord.names\n * @function\n * @param {String|Array} notes - the chord notes\n * @return {Array} an array of chord names or all known chord names if no arguments provided\n *\n * @example\n * var chord = require('music.chord')\n * chord.names() // => ['Maj7', 'm7', ... ] (109 names)\n * chord.names('D E F G A B C') [ 'D dorian' ]\n * chord.names('D E F G A B C') [ 'D dorian' ]\n */\nmodule.exports = names(chords, '')\n"
    },
    "name": "chord.names",
    "params": [
      {
        "title": "param",
        "description": "the chord notes",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "notes"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "an array of chord names or all known chord names if no arguments provided",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> chord = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.chord'</span>)\nchord.names() <span class=\"hljs-comment\">// =&gt; ['Maj7', 'm7', ... ] (109 names)</span>\nchord.names(<span class=\"hljs-string\">'D E F G A B C'</span>) [ <span class=\"hljs-string\">'D dorian'</span> ]\nchord.names(<span class=\"hljs-string\">'D E F G A B C'</span>) [ <span class=\"hljs-string\">'D dorian'</span> ]"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "chord.names"
    ]
  },
  {
    "description": "Get the type of the chord (can be 'M', 'm', '7' or 'o' to represent major,\nminot, dominant and dimished respectively)\n\nIt assumes that the chord is not inversed (first note is always the tonic)\n\nIt detects major, minor, augmented, diminished and dominant chords. All\nchord notes beyond the 5th (except 7th for dominant chords) are ignored",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 9,
        "name": "chord.type"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 10,
        "name": null
      },
      {
        "title": "param",
        "description": "the chord notes",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "chord"
      },
      {
        "title": "returns",
        "description": "the chord type ('M', 'm', '7', 'dim', 'aug' or null)",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "var chord = require('music.chord')\nchord.type('C E G') // => 'M'\nchord.type('C Eb G') // => 'm'\nchord.type('C Eb Gb') // => 'dim'\nchord.type('C E G#') // => 'aug'\nchord.type('C E G B') // => 'M'\nchord.type('C E G B7') // => '7'",
        "lineNumber": 15
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 27,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 28,
          "column": 0
        },
        "end": {
          "line": 38,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.chord/type.js",
      "code": "'use strict'\n\nvar harmonics = require('tonal.gamut/harmonics')\n\n/**\n * Get the type of the chord (can be 'M', 'm', '7' or 'o' to represent major,\n * minot, dominant and dimished respectively)\n *\n * It assumes that the chord is not inversed (first note is always the tonic)\n *\n * It detects major, minor, augmented, diminished and dominant chords. All\n * chord notes beyond the 5th (except 7th for dominant chords) are ignored\n *\n * @name chord.type\n * @function\n * @param {Array} chord - the chord notes\n * @return {String} the chord type ('M', 'm', '7', 'dim', 'aug' or null)\n *\n * @example\n * var chord = require('music.chord')\n * chord.type('C E G') // => 'M'\n * chord.type('C Eb G') // => 'm'\n * chord.type('C Eb Gb') // => 'dim'\n * chord.type('C E G#') // => 'aug'\n * chord.type('C E G B') // => 'M'\n * chord.type('C E G B7') // => '7'\n */\nmodule.exports = function (chord) {\n  var g = harmonics(chord)\n  var steps = g.map(function (i) { return i.charAt(0) })\n  if (steps[0] !== '1' || steps[1] !== '3' || steps[2] !== '5') return null\n  if (g[1] === '3M') {\n    if (g[2] === '5A') return 'aug'\n    else return g[3] === '7m' ? '7' : 'M'\n  } else if (g[1] === '3m') return g[2] === '5P' ? 'm' : 'dim'\n  return null\n}\n"
    },
    "name": "chord.type",
    "params": [
      {
        "title": "param",
        "description": "the chord notes",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "chord"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the chord type ('M', 'm', '7', 'dim', 'aug' or null)",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> chord = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.chord'</span>)\nchord.type(<span class=\"hljs-string\">'C E G'</span>) <span class=\"hljs-comment\">// =&gt; 'M'</span>\nchord.type(<span class=\"hljs-string\">'C Eb G'</span>) <span class=\"hljs-comment\">// =&gt; 'm'</span>\nchord.type(<span class=\"hljs-string\">'C Eb Gb'</span>) <span class=\"hljs-comment\">// =&gt; 'dim'</span>\nchord.type(<span class=\"hljs-string\">'C E G#'</span>) <span class=\"hljs-comment\">// =&gt; 'aug'</span>\nchord.type(<span class=\"hljs-string\">'C E G B'</span>) <span class=\"hljs-comment\">// =&gt; 'M'</span>\nchord.type(<span class=\"hljs-string\">'C E G B7'</span>) <span class=\"hljs-comment\">// =&gt; '7'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "chord.type"
    ]
  },
  {
    "description": "Get the interval between two pitches\n\nIf one or both are pitch classes, a simple ascending interval is returned\n\nThis function can be partially applied (see examples)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 7,
        "name": "distance"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 8,
        "name": null
      },
      {
        "title": "param",
        "description": "the first note",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "from"
      },
      {
        "title": "param",
        "description": "the other note",
        "lineNumber": 11,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "to"
      },
      {
        "title": "returns",
        "description": "the interval between them",
        "lineNumber": 12,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "var distance = require('tonal.distance')\ndistance('C2', 'D3') // => '9M'\ndistance('D2', 'C2') // => '-2M'\ndistance('D', 'C') // => '7m'",
        "lineNumber": 14
      },
      {
        "title": "example",
        "description": "// partially applied\nvar fromC = distance('C')\nfromC('D') // => '2M'",
        "lineNumber": 20
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 26,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 27,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.distance/index.js",
      "code": "var operation = require('tonal.pitch/operation')\n\n/**\n * Get the interval between two pitches\n *\n * If one or both are pitch classes, a simple ascending interval is returned\n *\n * This function can be partially applied (see examples)\n *\n * @name distance\n * @function\n * @param {String|Array} from - the first note\n * @param {String|Array} to - the other note\n * @return {String|Array} the interval between them\n *\n * @example\n * var distance = require('tonal.distance')\n * distance('C2', 'D3') // => '9M'\n * distance('D2', 'C2') // => '-2M'\n * distance('D', 'C') // => '7m'\n *\n * @example\n * // partially applied\n * var fromC = distance('C')\n * fromC('D') // => '2M'\n */\nmodule.exports = operation(function (a, b) {\n  if (!Array.isArray(a) || !Array.isArray(b)) return null\n  if (a.length === 1 || b.length === 1) {\n    var base = b[0] - a[0]\n    return [base, -Math.floor(base * 7 / 12)]\n  }\n  return [b[0] - a[0], b[1] - a[1]]\n})\n"
    },
    "name": "distance",
    "params": [
      {
        "title": "param",
        "description": "the first note",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "from"
      },
      {
        "title": "param",
        "description": "the other note",
        "lineNumber": 11,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "to"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the interval between them",
        "lineNumber": 12,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> distance = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.distance'</span>)\ndistance(<span class=\"hljs-string\">'C2'</span>, <span class=\"hljs-string\">'D3'</span>) <span class=\"hljs-comment\">// =&gt; '9M'</span>\ndistance(<span class=\"hljs-string\">'D2'</span>, <span class=\"hljs-string\">'C2'</span>) <span class=\"hljs-comment\">// =&gt; '-2M'</span>\ndistance(<span class=\"hljs-string\">'D'</span>, <span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; '7m'</span>",
      "<span class=\"hljs-comment\">// partially applied</span>\n<span class=\"hljs-keyword\">var</span> fromC = distance(<span class=\"hljs-string\">'C'</span>)\nfromC(<span class=\"hljs-string\">'D'</span>) <span class=\"hljs-comment\">// =&gt; '2M'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "distance"
    ]
  },
  {
    "description": "In music.kit a gamut is a collection of intervals, pitch classes or notes.\nScales, chords, pitch sets are examples of gamuts.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 4,
        "name": "gamut"
      },
      {
        "title": "param",
        "description": "a list of elements",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "source"
      },
      {
        "title": "returns",
        "description": "a list of pitches",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "gamut('c2 bb fx blah') // => ['C2', 'Bb', 'F##', null]",
        "lineNumber": 8
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 16,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.gamut/gamut.js",
      "code": "'use strict'\n\nvar split = require('./split')\nvar pitch = require('tonal.pitch/pitch')\n\n/**\n * In music.kit a gamut is a collection of intervals, pitch classes or notes.\n * Scales, chords, pitch sets are examples of gamuts.\n *\n * @name gamut\n * @param {String|Array} source - a list of elements\n * @return {Array} a list of pitches\n *\n * @example\n * gamut('c2 bb fx blah') // => ['C2', 'Bb', 'F##', null]\n */\nmodule.exports = function (g) {\n  return split(g).map(pitch)\n}\n"
    },
    "name": "gamut",
    "params": [
      {
        "title": "param",
        "description": "a list of elements",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "source"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "a list of pitches",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "gamut(<span class=\"hljs-string\">'c2 bb fx blah'</span>) <span class=\"hljs-comment\">// =&gt; ['C2', 'Bb', 'F##', null]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "gamut"
    ]
  },
  {
    "description": "Create a chord from a source and a tonic. A chord is a list of notes or\nintervals in asceding pitch order\n\nThe source can be a list of intervals or notes. The tonic must be\na pitch (with or without octave) or false to get the intervals\n\nThis function is currified, so you can partially apply the function passing\none parameter instead of two (see example)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 10,
        "name": "gamut.chord"
      },
      {
        "title": "param",
        "description": "the list of intervals or notes",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "source"
      },
      {
        "title": "param",
        "description": "the tonic of the chord or null to get the intervals",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "tonic"
      },
      {
        "title": "returns",
        "description": "the chord notes (or intervals if null tonic)",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var chord = require('tonal.gamut/chord')\nchord.build('1 3 5 6', 'G') // => ['G', 'B', 'D', 'E']\n// partially applied:\nvar maj79 = chord.build('C E G B D')\nmaj79('A4') // => ['A4', 'C#5', 'E5', 'G#5', 'B5']",
        "lineNumber": 15
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 27,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 28,
          "column": 0
        },
        "end": {
          "line": 32,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.gamut/chord.js",
      "code": "'use strict'\n\nvar transpose = require('tonal.transpose')\nvar harmonics = require('./harmonics')\n\n/**\n * Create a chord from a source and a tonic. A chord is a list of notes or\n * intervals in asceding pitch order\n *\n * The source can be a list of intervals or notes. The tonic must be\n * a pitch (with or without octave) or false to get the intervals\n *\n * This function is currified, so you can partially apply the function passing\n * one parameter instead of two (see example)\n *\n * @name gamut.chord\n * @param {Array} source - the list of intervals or notes\n * @param {String} tonic - the tonic of the chord or null to get the intervals\n * @return {Array} the chord notes (or intervals if null tonic)\n *\n * @example\n * var chord = require('tonal.gamut/chord')\n * chord.build('1 3 5 6', 'G') // => ['G', 'B', 'D', 'E']\n * // partially applied:\n * var maj79 = chord.build('C E G B D')\n * maj79('A4') // => ['A4', 'C#5', 'E5', 'G#5', 'B5']\n */\nmodule.exports = function (notes, tonic) {\n  var h = harmonics(notes)\n  return h.map(transpose(tonic))\n}\n"
    },
    "name": "gamut.chord",
    "params": [
      {
        "title": "param",
        "description": "the list of intervals or notes",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "source"
      },
      {
        "title": "param",
        "description": "the tonic of the chord or null to get the intervals",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "tonic"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the chord notes (or intervals if null tonic)",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> chord = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.gamut/chord'</span>)\nchord.build(<span class=\"hljs-string\">'1 3 5 6'</span>, <span class=\"hljs-string\">'G'</span>) <span class=\"hljs-comment\">// =&gt; ['G', 'B', 'D', 'E']</span>\n<span class=\"hljs-comment\">// partially applied:</span>\n<span class=\"hljs-keyword\">var</span> maj79 = chord.build(<span class=\"hljs-string\">'C E G B D'</span>)\nmaj79(<span class=\"hljs-string\">'A4'</span>) <span class=\"hljs-comment\">// =&gt; ['A4', 'C#5', 'E5', 'G#5', 'B5']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "gamut.chord"
    ]
  },
  {
    "description": "Get the distances from the first note of a gamut to the rest of notes\n\nPitch classes are treated as notes with octave equal 0",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "gamut.harmonics"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 6,
        "name": null
      },
      {
        "title": "param",
        "description": "the list of notes",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "gamut"
      },
      {
        "title": "example",
        "description": "gamut.harmonics('c2 e2 g2') // => ['1P', '3M', '5P']",
        "lineNumber": 10
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 16,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.gamut/harmonics.js",
      "code": "var operation = require('./operation')\nvar distance = require('tonal.distance')\n\n/**\n * Get the distances from the first note of a gamut to the rest of notes\n *\n * Pitch classes are treated as notes with octave equal 0\n *\n * @name gamut.harmonics\n * @function\n * @param {String|Array} gamut - the list of notes\n *\n * @example\n * gamut.harmonics('c2 e2 g2') // => ['1P', '3M', '5P']\n */\nmodule.exports = operation(function (gamut) {\n  var tonic = gamut[0]\n  return gamut.map(distance(tonic))\n})\n"
    },
    "name": "gamut.harmonics",
    "params": [
      {
        "title": "param",
        "description": "the list of notes",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "gamut"
      }
    ],
    "examples": [
      "gamut.harmonics(<span class=\"hljs-string\">'c2 e2 g2'</span>) <span class=\"hljs-comment\">// =&gt; ['1P', '3M', '5P']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "gamut.harmonics"
    ]
  },
  {
    "description": "Apply a function to an array of array pitches",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "gamut.operation"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.gamut/operation.js",
      "code": "var split = require('./split')\nvar parse = require('tonal.pitch/parse')\nvar str = require('tonal.pitch/str')\n\n/**\n * Apply a function to an array of array pitches\n *\n * @name gamut.operation\n * @function\n */\nmodule.exports = function op (fn, source) {\n  if (arguments.length > 1) return op(fn)(source)\n  return function (source) {\n    var g = split(source)\n    if (Array.isArray(g[0])) return fn(g)\n    var v = fn(g.map(parse))\n    return Array.isArray(v) ? v.map(str) : v\n  }\n}\n"
    },
    "name": "gamut.operation",
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "gamut.operation"
    ]
  },
  {
    "description": "Rotate the gamut",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "gamut.rotate"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the number of rotations",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        },
        "name": "count"
      },
      {
        "title": "param",
        "description": "a list of notes or intervals",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "gamut"
      },
      {
        "title": "returns",
        "description": "the gamut rotated count times",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var rotate = require('music.kit/gamut/rotate')\nrotate(1, 'C D E') // => ['D', 'E', 'C']",
        "lineNumber": 10
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 16,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.gamut/rotate.js",
      "code": "'use strict'\n\nvar split = require('./split')\n/**\n * Rotate the gamut\n *\n * @name gamut.rotate\n * @function\n * @param {Integer} count - the number of rotations\n * @param {String|Array} gamut - a list of notes or intervals\n * @return {Array} the gamut rotated count times\n *\n * @example\n * var rotate = require('music.kit/gamut/rotate')\n * rotate(1, 'C D E') // => ['D', 'E', 'C']\n */\nmodule.exports = function (count, source) {\n  var g = split(source)\n  var len = g.length\n  var n = ((count % len) + len) % len\n  return g.slice(n, len).concat(g.slice(0, n))\n}\n"
    },
    "name": "gamut.rotate",
    "params": [
      {
        "title": "param",
        "description": "the number of rotations",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        },
        "name": "count"
      },
      {
        "title": "param",
        "description": "a list of notes or intervals",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "gamut"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the gamut rotated count times",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> rotate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.kit/gamut/rotate'</span>)\nrotate(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'C D E'</span>) <span class=\"hljs-comment\">// =&gt; ['D', 'E', 'C']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "gamut.rotate"
    ]
  },
  {
    "description": "Create a scale from a gamut and a tonic. A scale is a set of notes or\nintervals ordered by frequency with a tonic.\n\nA source can be a list of intervals or notes.\n\nThe tonic can be a note (with or without octave), false to get the scale\nintervals or null to set the first note of the source as tonic\n\nThis function is currified, so you can partially apply the function passing\none parameter instead of two (see example)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 12,
        "name": "gamut.scale"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 13,
        "name": null
      },
      {
        "title": "param",
        "description": "the list of intervals or notes",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "source"
      },
      {
        "title": "param",
        "description": "the tonic of the scale",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "tonic"
      },
      {
        "title": "returns",
        "description": "the list of notes",
        "lineNumber": 17,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var scale = require('tonal.gamut/scale')\n// basic usage\nscale('1 2 3 5 6', 'G') // => ['G', 'A', 'B', 'D', 'E']\nscale('1 2 3 5 6', false) // => ['1P', '2M', '3M', '5P', '6M']",
        "lineNumber": 19
      },
      {
        "title": "example",
        "description": "// uses first note of the source as tonic\nscale('c d e f g a b c d e', null) // => []",
        "lineNumber": 25
      },
      {
        "title": "example",
        "description": "// partially applied\nvar dorian = scale('D E F G A B C')\ndorian('C4') // => ['C4', 'D4', 'Eb4', 'F4', 'G4', 'A4', 'Bb4']",
        "lineNumber": 29
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 9,
        "column": 0
      },
      "end": {
        "line": 41,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 42,
          "column": 0
        },
        "end": {
          "line": 58,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.gamut/scale.js",
      "code": "'use strict'\n\nvar transpose = require('tonal.transpose')\nvar operation = require('./operation')\nvar harmonics = require('./harmonics')\nvar split = require('./split')\nvar set = require('./set')\n\n/**\n * Create a scale from a gamut and a tonic. A scale is a set of notes or\n * intervals ordered by frequency with a tonic.\n *\n * A source can be a list of intervals or notes.\n\n * The tonic can be a note (with or without octave), false to get the scale\n * intervals or null to set the first note of the source as tonic\n *\n * This function is currified, so you can partially apply the function passing\n * one parameter instead of two (see example)\n *\n * @name gamut.scale\n * @function\n * @param {Array} source - the list of intervals or notes\n * @param {String} tonic - the tonic of the scale\n * @return {Array} the list of notes\n *\n * @example\n * var scale = require('tonal.gamut/scale')\n * // basic usage\n * scale('1 2 3 5 6', 'G') // => ['G', 'A', 'B', 'D', 'E']\n * scale('1 2 3 5 6', false) // => ['1P', '2M', '3M', '5P', '6M']\n *\n * @example\n * // uses first note of the source as tonic\n * scale('c d e f g a b c d e', null) // => []\n *\n * @example\n * // partially applied\n * var dorian = scale('D E F G A B C')\n * dorian('C4') // => ['C4', 'D4', 'Eb4', 'F4', 'G4', 'A4', 'Bb4']\n */\nmodule.exports = function b (notes, tonic) {\n  if (arguments.length === 1) return function (t) { return b(notes, t) }\n  notes = split(notes)\n  var len = notes.length\n  if (len === 0) return []\n  var intervals = operation(function (gamut) {\n    tonic = !tonic && tonic !== false ? gamut[0] : tonic\n    var s = set(gamut)\n    var i = indexOf(gamut[0][0], s, len)\n    var ordered = s.slice(i, len).concat(s.slice(0, i))\n    return harmonics(ordered)\n  }, notes)\n  tonic = !tonic && tonic !== false ? notes[0] : tonic\n  return intervals.map(transpose(tonic))\n}\n\nfunction indexOf (p, g, l) {\n  for (var i = 0; i < l; i++) {\n    if (g[i][0] === p) return i\n  }\n}"
    },
    "name": "gamut.scale",
    "params": [
      {
        "title": "param",
        "description": "the list of intervals or notes",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "source"
      },
      {
        "title": "param",
        "description": "the tonic of the scale",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "tonic"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the list of notes",
        "lineNumber": 17,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> scale = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.gamut/scale'</span>)\n<span class=\"hljs-comment\">// basic usage</span>\nscale(<span class=\"hljs-string\">'1 2 3 5 6'</span>, <span class=\"hljs-string\">'G'</span>) <span class=\"hljs-comment\">// =&gt; ['G', 'A', 'B', 'D', 'E']</span>\nscale(<span class=\"hljs-string\">'1 2 3 5 6'</span>, <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// =&gt; ['1P', '2M', '3M', '5P', '6M']</span>",
      "<span class=\"hljs-comment\">// uses first note of the source as tonic</span>\nscale(<span class=\"hljs-string\">'c d e f g a b c d e'</span>, <span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// =&gt; []</span>",
      "<span class=\"hljs-comment\">// partially applied</span>\n<span class=\"hljs-keyword\">var</span> dorian = scale(<span class=\"hljs-string\">'D E F G A B C'</span>)\ndorian(<span class=\"hljs-string\">'C4'</span>) <span class=\"hljs-comment\">// =&gt; ['C4', 'D4', 'Eb4', 'F4', 'G4', 'A4', 'Bb4']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "gamut.scale"
    ]
  },
  {
    "description": "Select some elements from a gamut",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "gamut.select"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "a __1-based__ index of the elements",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "numbers"
      },
      {
        "title": "param",
        "description": "the notes or intervals",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "gamut"
      },
      {
        "title": "returns",
        "description": "the selected elements",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var select = require('tonal.gamut/select')\nselect('1 3 5', 'C D E F G A B') // => ['C', 'E', 'G']",
        "lineNumber": 10
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 17,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.gamut/select.js",
      "code": "'use strict'\n\nvar split = require('./split')\n\n/**\n * Select some elements from a gamut\n *\n * @name gamut.select\n * @function\n * @param {String|Array} numbers - a __1-based__ index of the elements\n * @param {String|Array} gamut - the notes or intervals\n * @return {Array} the selected elements\n *\n * @example\n * var select = require('tonal.gamut/select')\n * select('1 3 5', 'C D E F G A B') // => ['C', 'E', 'G']\n */\nmodule.exports = function s (nums, gamut) {\n  if (arguments.length === 1) return function (g) { return s(nums, g) }\n  var g = split(gamut)\n  return split(nums).map(function (n) {\n    return g[n - 1]\n  })\n}\n"
    },
    "name": "gamut.select",
    "params": [
      {
        "title": "param",
        "description": "a __1-based__ index of the elements",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "numbers"
      },
      {
        "title": "param",
        "description": "the notes or intervals",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "gamut"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the selected elements",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> select = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.gamut/select'</span>)\nselect(<span class=\"hljs-string\">'1 3 5'</span>, <span class=\"hljs-string\">'C D E F G A B'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'E', 'G']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "gamut.select"
    ]
  },
  {
    "description": "Create a set: a set is a list of uniq pitch classes or simplified intervals\nin ascending pitch order",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 4,
        "name": "gamut.set"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 5,
        "name": null
      },
      {
        "title": "param",
        "description": "the note list",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "notes"
      },
      {
        "title": "returns",
        "description": "the set",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "var set = require('tonal.gamut/set')\nset('E7 C2 e D5 c1') // => ['C', 'D', 'E']\nset('11 10 9') // => [ '2M', '3M', '4P' ]",
        "lineNumber": 10
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 20,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 21,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.gamut/set.js",
      "code": "'use strict'\n\nvar simplify = require('tonal.pitch/simplify')\nvar operation = require('./operation')\nvar sort = require('./sort')\n\n/**\n * Create a set: a set is a list of uniq pitch classes or simplified intervals\n * in ascending pitch order\n *\n * @name gamut.set\n * @function\n * @param {String|Array} notes - the note list\n * @return {String|Array} the set\n *\n * @example\n * var set = require('tonal.gamut/set')\n * set('E7 C2 e D5 c1') // => ['C', 'D', 'E']\n * set('11 10 9') // => [ '2M', '3M', '4P' ]\n */\nmodule.exports = operation(function (notes) {\n  var sorted = sort(notes.map(simplify))\n  return sorted.reduce(function (uniq, value, index) {\n    if (index === 0 || !equal(sorted[index - 1], value)) uniq.push(value)\n    return uniq\n  }, [])\n})\n\nfunction equal (a, b) {\n  return a[0] === b[0] && a[1] === b[1]\n}"
    },
    "name": "gamut.set",
    "params": [
      {
        "title": "param",
        "description": "the note list",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "notes"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the set",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> set = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.gamut/set'</span>)\nset(<span class=\"hljs-string\">'E7 C2 e D5 c1'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E']</span>\nset(<span class=\"hljs-string\">'11 10 9'</span>) <span class=\"hljs-comment\">// =&gt; [ '2M', '3M', '4P' ]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "gamut.set"
    ]
  },
  {
    "description": "Get a gamut in ascdening pitch order",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "gamut.sort"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the gamut to sort",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "gamut"
      },
      {
        "title": "returns",
        "description": "the gamut in sort pitch order",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var sort = require('music.kit/gamut.sort')\nsort('c5 d2 f4 D2') // => ['D2', 'D2', 'F4', 'C5']",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 17,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.gamut/sort.js",
      "code": "'use strict'\n\nvar height = require('tonal.pitch/height')\nvar operation = require('./operation')\n\n/**\n * Get a gamut in ascdening pitch order\n *\n * @name gamut.sort\n * @function\n * @param {String|Array} gamut - the gamut to sort\n * @return {Array} the gamut in sort pitch order\n *\n * @example\n * var sort = require('music.kit/gamut.sort')\n * sort('c5 d2 f4 D2') // => ['D2', 'D2', 'F4', 'C5']\n */\nmodule.exports = operation(function (gamut) {\n  return gamut.sort(function (a, b) {\n    return height(a) - height(b)\n  })\n})\n"
    },
    "name": "gamut.sort",
    "params": [
      {
        "title": "param",
        "description": "the gamut to sort",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "gamut"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the gamut in sort pitch order",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> sort = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.kit/gamut.sort'</span>)\nsort(<span class=\"hljs-string\">'c5 d2 f4 D2'</span>) <span class=\"hljs-comment\">// =&gt; ['D2', 'D2', 'F4', 'C5']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "gamut.sort"
    ]
  },
  {
    "description": "Convert a source to an array. If the source is an array, return it.\n\nAside from an array itself, the source can be a\nstring with elements separated by spaces, commas or bars (`|`) or a single\nelement that will be wrapped inside an array\n\nThis function __does not perform any transformation__ of the array elements.\nand __it always return an array, even if its empty__.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 10,
        "name": "gamut.split"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 11,
        "name": null
      },
      {
        "title": "param",
        "description": "the source",
        "lineNumber": 13,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "source"
      },
      {
        "title": "returns",
        "description": "the source as array",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "split = require('music.kit/gamut.split')\nsplit('a | B C , Dmaj7') // => ['a', 'B', 'C', 'Dmaj7']\nsplit() // => []",
        "lineNumber": 16
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 23,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 24,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.gamut/split.js",
      "code": "'use strict'\nvar SEP = /\\s*\\|\\s*|\\s*,\\s*|\\s+/\n\n/**\n * Convert a source to an array. If the source is an array, return it.\n *\n * Aside from an array itself, the source can be a\n * string with elements separated by spaces, commas or bars (`|`) or a single\n * element that will be wrapped inside an array\n *\n * This function __does not perform any transformation__ of the array elements.\n * and __it always return an array, even if its empty__.\n *\n * @name gamut.split\n * @function\n * @param {String|Array} source - the source\n * @return {Array} the source as array\n *\n * @example\n * split = require('music.kit/gamut.split')\n * split('a | B C , Dmaj7') // => ['a', 'B', 'C', 'Dmaj7']\n * split() // => []\n */\nmodule.exports = function (source) {\n  if (Array.isArray(source)) return source\n  else if (typeof source === 'string') return source.trim().split(SEP)\n  else if (source === null || typeof source === 'undefined') return []\n  else return [ source ]\n}\n"
    },
    "name": "gamut.split",
    "params": [
      {
        "title": "param",
        "description": "the source",
        "lineNumber": 13,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "source"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the source as array",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "split = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.kit/gamut.split'</span>)\nsplit(<span class=\"hljs-string\">'a | B C , Dmaj7'</span>) <span class=\"hljs-comment\">// =&gt; ['a', 'B', 'C', 'Dmaj7']</span>\nsplit() <span class=\"hljs-comment\">// =&gt; []</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "gamut.split"
    ]
  },
  {
    "description": "Create a key from a string. A key is a string with a tonic and a mode",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "key"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "example",
        "description": "key('C major') // => 'C major'\nkey('c Major') // => 'C major'\nkey('C') // => 'C major'\nkey('dbb miXolydian') // => 'Dbb mixolydian'",
        "lineNumber": 8
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 18,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.key/key.js",
      "code": "'use strict'\n\nvar parse = require('./parse')\nvar transpose = require('tonal.transpose')\nvar REGEX = /^#{1,7}|b{1,7}$/\n\n/**\n * Create a key from a string. A key is a string with a tonic and a mode\n *\n * @name key\n * @function\n *\n * @example\n * key('C major') // => 'C major'\n * key('c Major') // => 'C major'\n * key('C') // => 'C major'\n * key('dbb miXolydian') // => 'Dbb mixolydian'\n */\nmodule.exports = function (str) {\n  if (/^-?\\d$/.exec(str)) {\n    return major(+str)\n  } else if (REGEX.exec(str)) {\n    var dir = str[0] === 'b' ? -1 : 1\n    return major(str.length * dir)\n  } else {\n    var p = parse(str)\n    return p ? p.tonic + ' ' + p.mode : null\n  }\n}\n\nfunction major (n) { return transpose('C', [n, 0]) + ' major' }"
    },
    "name": "key",
    "examples": [
      "key(<span class=\"hljs-string\">'C major'</span>) <span class=\"hljs-comment\">// =&gt; 'C major'</span>\nkey(<span class=\"hljs-string\">'c Major'</span>) <span class=\"hljs-comment\">// =&gt; 'C major'</span>\nkey(<span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; 'C major'</span>\nkey(<span class=\"hljs-string\">'dbb miXolydian'</span>) <span class=\"hljs-comment\">// =&gt; 'Dbb mixolydian'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "key"
    ]
  },
  {
    "description": "Get a list of altered notes in the appropriate order",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "key.altNotes"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      },
      {
        "title": "returns",
        "description": "an array with the altered notes ordered or an empty array\nif its not a valid key name",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "key.altNotes('F major') // => ['Bb']\nkey.altNotes('Eb major') // => ['Bb', 'Eb', 'Ab']\nkey.altNotes('A major') // => ['F#', 'C#', 'G#']",
        "lineNumber": 10
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 33,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.key/altNotes.js",
      "code": "'use strict'\n\nvar alterations = require('./alterations')\nvar transpose = require('tonal.transpose')\n\n/**\n * Get a list of altered notes in the appropriate order\n *\n * @name key.altNotes\n * @function\n * @param {String} name - the key name\n * @return {Array} an array with the altered notes ordered or an empty array\n * if its not a valid key name\n *\n * @example\n * key.altNotes('F major') // => ['Bb']\n * key.altNotes('Eb major') // => ['Bb', 'Eb', 'Ab']\n * key.altNotes('A major') // => ['F#', 'C#', 'G#']\n */\nmodule.exports = function (k) {\n  var a = alterations(k)\n  if (a === null) return null\n  var notes = []\n  var tonic = a > 0 ? 'B' : 'F'\n  var interval = a > 0 ? [1, 0] : [-1, 0]\n  var l = Math.abs(a)\n  for (var i = 0; i < l; i++) {\n    tonic = transpose(tonic, interval)\n    notes.push(tonic)\n  }\n  return notes\n}\n"
    },
    "name": "key.altNotes",
    "params": [
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "an array with the altered notes ordered or an empty array\nif its not a valid key name",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "key.altNotes(<span class=\"hljs-string\">'F major'</span>) <span class=\"hljs-comment\">// =&gt; ['Bb']</span>\nkey.altNotes(<span class=\"hljs-string\">'Eb major'</span>) <span class=\"hljs-comment\">// =&gt; ['Bb', 'Eb', 'Ab']</span>\nkey.altNotes(<span class=\"hljs-string\">'A major'</span>) <span class=\"hljs-comment\">// =&gt; ['F#', 'C#', 'G#']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "key.altNotes"
    ]
  },
  {
    "description": "Build a key from key name",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "key.build"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      },
      {
        "title": "returns",
        "description": "an array with the tonic and mode or null if not valid key",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var key = require('music.key')\nkey('C major') // => ['C', 'major']\nkey('fx MINOR') // => ['F##', 'minor']\nkey('Ab mixolydian') // => ['Ab', 'mixolydian']\nkey('f bebop') // => 'null'",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 21,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 38,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.key/parse.js",
      "code": "'use strict'\n\nvar note = require('tonal.notation/note')\nvar KEYS = { major: 1, minor: 6, ionian: 1, dorian: 2, phrygian: 3, lydian: 4,\n  mixolydian: 5, aeolian: 6, locrian: 7 }\n\n/**\n * Build a key from key name\n *\n * @name key.build\n * @function\n * @param {String} name - the key name\n * @return {Array} an array with the tonic and mode or null if not valid key\n *\n * @example\n * var key = require('music.key')\n * key('C major') // => ['C', 'major']\n * key('fx MINOR') // => ['F##', 'minor']\n * key('Ab mixolydian') // => ['Ab', 'mixolydian']\n * key('f bebop') // => 'null'\n */\nmodule.exports = function (name) {\n  var m, s, t\n  if (!name) return null\n  s = name.trim().split(/\\s+/)\n  t = note(s[0])\n  if (s.length === 1) {\n    m = s[0].toLowerCase()\n    if (KEYS[m]) return k(null, m)\n    else if (t) return k(t, 'major')\n    else return null\n  }\n  m = s[1].toLowerCase()\n  if (t && KEYS[m]) return k(t, m)\n  return null\n}\n\nfunction k (t, m) { return {tonic: t || false, mode: m, dist: KEYS[m]} }"
    },
    "name": "key.build",
    "params": [
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "an array with the tonic and mode or null if not valid key",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> key = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.key'</span>)\nkey(<span class=\"hljs-string\">'C major'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'major']</span>\nkey(<span class=\"hljs-string\">'fx MINOR'</span>) <span class=\"hljs-comment\">// =&gt; ['F##', 'minor']</span>\nkey(<span class=\"hljs-string\">'Ab mixolydian'</span>) <span class=\"hljs-comment\">// =&gt; ['Ab', 'mixolydian']</span>\nkey(<span class=\"hljs-string\">'f bebop'</span>) <span class=\"hljs-comment\">// =&gt; 'null'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "key.build"
    ]
  },
  {
    "description": "Get chords of a key",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "key.chords"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      },
      {
        "title": "returns",
        "description": "an array with the key chords",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "key.chords('C major') // => ['C', 'Dm', 'Em', 'F', 'G7', 'Am', 'Bo'\nkey.chords('major', false) // => ['C', 'Dm', ...]",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 18,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 24,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.key/chords.js",
      "code": "'use strict'\n\nvar scale = require('./scale')\nvar chord = require('tonal.scale/chord')\nvar modes = require('tonal.scale/modes')\n\n/**\n * Get chords of a key\n *\n * @name key.chords\n * @function\n * @param {String} name - the key name\n * @return {Array} an array with the key chords\n *\n * @example\n * key.chords('C major') // => ['C', 'Dm', 'Em', 'F', 'G7', 'Am', 'Bo'\n * key.chords('major', false) // => ['C', 'Dm', ...]\n */\nmodule.exports = function (k) {\n  return modes(scale(k)).map(function (s) {\n    return chord(s)\n  })\n}\n"
    },
    "name": "key.chords",
    "params": [
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "an array with the key chords",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "key.chords(<span class=\"hljs-string\">'C major'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'Dm', 'Em', 'F', 'G7', 'Am', 'Bo'</span>\nkey.chords(<span class=\"hljs-string\">'major'</span>, <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'Dm', ...]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "key.chords"
    ]
  },
  {
    "description": "Get a chord progression from within a key",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "key.progression"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the roman numerals",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "numerals"
      },
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "key"
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 10,
        "column": 0
      },
      "end": {
        "line": 17,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.key/progression.js",
      "code": "'use strict'\n\nvar split = require('tonal.gamut/split')\nvar roman = require('tonal.notation/roman.parse')\nvar interval = require('tonal.notation/interval.parse')\nvar parse = require('./parse')\nvar chords = require('./chords')\nvar scale = require('./scale')\n\n/**\n * Get a chord progression from within a key\n *\n * @name key.progression\n * @function\n * @param {String|Array} numerals - the roman numerals\n * @param {String} key - the key name\n */\nmodule.exports = function (numerals, key) {\n  var k = parse(key)\n  if (!k || !k.tonic) return null\n  var s = scale(k.mode).map(interval)\n  var c = chords(key)\n  var degrees = split(numerals).map(roman)\n  return degrees.map(function (d) {\n    var i = indexOf(d[0], s)\n    return i < 0 ? null : c[i]\n  })\n}\n\nfunction indexOf (v, s) {\n  for (var i = 0; i < 7; i++) {\n    if (s[i][0] === v) return i\n  }\n  return -1\n}"
    },
    "name": "key.progression",
    "params": [
      {
        "title": "param",
        "description": "the roman numerals",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "numerals"
      },
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "key"
      }
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "key.progression"
    ]
  },
  {
    "description": "Get relative of a key",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "key.relative"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the name of the relative mode desired",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "relative"
      },
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "key"
      },
      {
        "title": "returns",
        "description": "the relative key name or null if the key or the relative name\nare not valid",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "key.relative('minor', 'C major') // => 'A minor'\nkey.relative('major', 'A minor') // => 'C major'\nkey.relative('dorian', 'F major') // => 'G dorian'",
        "lineNumber": 11
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 20,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 21,
          "column": 0
        },
        "end": {
          "line": 28,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.key/relative.js",
      "code": "'use strict'\n\nvar parse = require('./parse')\nvar transpose = require('tonal.transpose')\n\n/**\n * Get relative of a key\n *\n * @name key.relative\n * @function\n * @param {String} relative - the name of the relative mode desired\n * @param {String} key - the key name\n * @return {String} the relative key name or null if the key or the relative name\n * are not valid\n *\n * @example\n * key.relative('minor', 'C major') // => 'A minor'\n * key.relative('major', 'A minor') // => 'C major'\n * key.relative('dorian', 'F major') // => 'G dorian'\n */\nmodule.exports = function (rel, key) {\n  var k = parse(key)\n  var r = parse(rel)\n  if (!k || !k.tonic || !r) return null\n  var major = k.mode === 'major' ? k.tonic : transpose(k.tonic, '-' + k.dist)\n  return r.mode === 'major' ? major + ' major' : transpose(major, '' + r.dist) + ' ' + rel\n}\n"
    },
    "name": "key.relative",
    "params": [
      {
        "title": "param",
        "description": "the name of the relative mode desired",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "relative"
      },
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "key"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the relative key name or null if the key or the relative name\nare not valid",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "key.relative(<span class=\"hljs-string\">'minor'</span>, <span class=\"hljs-string\">'C major'</span>) <span class=\"hljs-comment\">// =&gt; 'A minor'</span>\nkey.relative(<span class=\"hljs-string\">'major'</span>, <span class=\"hljs-string\">'A minor'</span>) <span class=\"hljs-comment\">// =&gt; 'C major'</span>\nkey.relative(<span class=\"hljs-string\">'dorian'</span>, <span class=\"hljs-string\">'F major'</span>) <span class=\"hljs-comment\">// =&gt; 'G dorian'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "key.relative"
    ]
  },
  {
    "description": "",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 1,
        "name": "key.scale"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": null
      },
      {
        "title": "example",
        "description": "key.scale('C major') // => ['C', 'D', 'E', ...]",
        "lineNumber": 6
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 13,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.key/scale.js",
      "code": "'use strict'\n\nvar set = require('tonal.set/fromBinary')\nvar key = require('./parse')\nvar SCALES = [ 2773, 2902, 3418, 2741, 2774, 2906, 3434 ]\n\n/**\n * @name key.scale\n * @function\n *\n * @example\n * key.scale('C major') // => ['C', 'D', 'E', ...]\n */\nmodule.exports = function (name) {\n  var k = key(name)\n  if (!k) return []\n  return set(SCALES[k.dist - 1], k.tonic)\n}\n"
    },
    "name": "key.scale",
    "examples": [
      "key.scale(<span class=\"hljs-string\">'C major'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E', ...]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "key.scale"
    ]
  },
  {
    "description": "Get the number of alterations of a key",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "key.signature"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      },
      {
        "title": "returns",
        "description": "the number of alterations or null if not valid key",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        }
      },
      {
        "title": "example",
        "description": "key.signature('C major') // => 0\nkey.signature('F major') // => -1\nkey.signature('Eb major') // => -3\nkey.signature('A major') // => 3\nkey.signature('nonsense') // => null",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 21,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.key/alterations.js",
      "code": "'use strict'\n\nvar relative = require('./relative')\nvar distance = require('tonal.distance')\nvar parse = require('tonal.notation/interval.parse')\n\n/**\n * Get the number of alterations of a key\n *\n * @name key.signature\n * @function\n * @param {String} name - the key name\n * @return {Integer} the number of alterations or null if not valid key\n *\n * @example\n * key.signature('C major') // => 0\n * key.signature('F major') // => -1\n * key.signature('Eb major') // => -3\n * key.signature('A major') // => 3\n * key.signature('nonsense') // => null\n */\nmodule.exports = function (key) {\n  var k = relative('major', key)\n  return k ? parse(distance('C', k.split(' ')[0]))[0] : null\n}\n"
    },
    "name": "key.signature",
    "params": [
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the number of alterations or null if not valid key",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        }
      }
    ],
    "examples": [
      "key.signature(<span class=\"hljs-string\">'C major'</span>) <span class=\"hljs-comment\">// =&gt; 0</span>\nkey.signature(<span class=\"hljs-string\">'F major'</span>) <span class=\"hljs-comment\">// =&gt; -1</span>\nkey.signature(<span class=\"hljs-string\">'Eb major'</span>) <span class=\"hljs-comment\">// =&gt; -3</span>\nkey.signature(<span class=\"hljs-string\">'A major'</span>) <span class=\"hljs-comment\">// =&gt; 3</span>\nkey.signature(<span class=\"hljs-string\">'nonsense'</span>) <span class=\"hljs-comment\">// =&gt; null</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "key.signature"
    ]
  },
  {
    "description": "Get signature of a key",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "key.signature"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      },
      {
        "title": "returns",
        "description": "a string with the alterations",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "key.signature('F major') // => 'b'\nkey.signature('Eb major') // => 'bbb'\nkey.signature('A major') // => '###'\nkey.signature('C major') // => ''\nkey.signature('nonsense') // => null",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 24,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.key/signature.js",
      "code": "'use strict'\n\nvar alterations = require('./alterations')\n\n/**\n * Get signature of a key\n *\n * @name key.signature\n * @function\n * @param {String} name - the key name\n * @return {String} a string with the alterations\n *\n * @example\n * key.signature('F major') // => 'b'\n * key.signature('Eb major') // => 'bbb'\n * key.signature('A major') // => '###'\n * key.signature('C major') // => ''\n * key.signature('nonsense') // => null\n */\nmodule.exports = function (key) {\n  var n = alterations(key)\n  return n !== null ? new Array(Math.abs(n) + 1).join(n < 0 ? 'b' : '#') : null\n}\n"
    },
    "name": "key.signature",
    "params": [
      {
        "title": "param",
        "description": "the key name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "a string with the alterations",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "key.signature(<span class=\"hljs-string\">'F major'</span>) <span class=\"hljs-comment\">// =&gt; 'b'</span>\nkey.signature(<span class=\"hljs-string\">'Eb major'</span>) <span class=\"hljs-comment\">// =&gt; 'bbb'</span>\nkey.signature(<span class=\"hljs-string\">'A major'</span>) <span class=\"hljs-comment\">// =&gt; '###'</span>\nkey.signature(<span class=\"hljs-string\">'C major'</span>) <span class=\"hljs-comment\">// =&gt; ''</span>\nkey.signature(<span class=\"hljs-string\">'nonsense'</span>) <span class=\"hljs-comment\">// =&gt; null</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "key.signature"
    ]
  },
  {
    "description": "Get a interval from a string (or null if not valid interval)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "notation.interval"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the source",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "src"
      },
      {
        "title": "returns",
        "description": "the interval in short notation",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "interval = require('tonal.notation/interval')\ninterval('2M') // => '2M'\ninterval('2') // => '2M'\ninterval('2m') // => '2m'\ninterval('2b') // => '2m'\ninterval('C') // => null",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 21,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/interval.js",
      "code": "'use strict'\n\nvar parse = require('./interval.parse')\nvar str = require('./interval.str')\n\n/**\n * Get a interval from a string (or null if not valid interval)\n *\n * @name notation.interval\n * @function\n * @param {String} src - the source\n * @return {String} the interval in short notation\n *\n * @example\n * interval = require('tonal.notation/interval')\n * interval('2M') // => '2M'\n * interval('2') // => '2M'\n * interval('2m') // => '2m'\n * interval('2b') // => '2m'\n * interval('C') // => null\n */\nmodule.exports = function (n) { return str(parse(n)) }\n"
    },
    "name": "notation.interval",
    "params": [
      {
        "title": "param",
        "description": "the source",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "src"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the interval in short notation",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "interval = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.notation/interval'</span>)\ninterval(<span class=\"hljs-string\">'2M'</span>) <span class=\"hljs-comment\">// =&gt; '2M'</span>\ninterval(<span class=\"hljs-string\">'2'</span>) <span class=\"hljs-comment\">// =&gt; '2M'</span>\ninterval(<span class=\"hljs-string\">'2m'</span>) <span class=\"hljs-comment\">// =&gt; '2m'</span>\ninterval(<span class=\"hljs-string\">'2b'</span>) <span class=\"hljs-comment\">// =&gt; '2m'</span>\ninterval(<span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; null</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.interval"
    ]
  },
  {
    "description": "Parse a [interval shorthand notation](https://en.wikipedia.org/wiki/Interval_(music)#Shorthand_notation)\nto [interval coord notation](https://github.com/danigb/music.array.notation)\n\nThis function is cached for better performance.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 6,
        "name": "notation.interval.parse"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 7,
        "name": null
      },
      {
        "title": "param",
        "description": "the interval string",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "interval"
      },
      {
        "title": "returns",
        "description": "the interval in array notation or null if not a valid interval",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var parse = require('tonal.notation/interval.parse')\nparse('3m') // => [2, -1, 0]\nparse('9b') // => [1, -1, 1]\nparse('-2M') // => [6, -1, -1]",
        "lineNumber": 12
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 12,
        "column": 0
      },
      "end": {
        "line": 28,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 29,
          "column": 0
        },
        "end": {
          "line": 48,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/interval.parse.js",
      "code": "'use strict'\n\nvar parser = require('./parser')\nvar ptc = require('./props.coord')\nvar INTERVAL = /^([-+]?)(\\d+)(d{1,4}|m|M|P|A{1,4}|b{1,4}|#{1,4}|)$/\nvar TYPES = 'PMMPPMM'\nvar QALT = {\n  P: { dddd: -4, ddd: -3, dd: -2, d: -1, P: 0, A: 1, AA: 2, AAA: 3, AAAA: 4 },\n  M: { ddd: -4, dd: -3, d: -2, m: -1, M: 0, A: 1, AA: 2, AAA: 3, AAAA: 4 }\n}\n\n/**\n * Parse a [interval shorthand notation](https://en.wikipedia.org/wiki/Interval_(music)#Shorthand_notation)\n * to [interval coord notation](https://github.com/danigb/music.array.notation)\n *\n * This function is cached for better performance.\n *\n * @name notation.interval.parse\n * @function\n * @param {String} interval - the interval string\n * @return {Array} the interval in array notation or null if not a valid interval\n *\n * @example\n * var parse = require('tonal.notation/interval.parse')\n * parse('3m') // => [2, -1, 0]\n * parse('9b') // => [1, -1, 1]\n * parse('-2M') // => [6, -1, -1]\n */\nmodule.exports = parser(function (str) {\n  var m = INTERVAL.exec(str)\n  if (!m) return null\n  var dir = m[1] === '-' ? -1 : 1\n  var num = +m[2] - 1\n\n  var simple = num % 7\n\n  var alt\n  if (m[3] === '') alt = 0\n  else if (m[3][0] === '#') alt = m[3].length\n  else if (m[3][0] === 'b') alt = -m[3].length\n  else {\n    alt = QALT[TYPES[simple]][m[3]]\n    if (typeof alt === 'undefined') return null\n  }\n  var oct = Math.floor(num / 7)\n  return ptc([simple, alt, oct, dir])\n})\n"
    },
    "name": "notation.interval.parse",
    "params": [
      {
        "title": "param",
        "description": "the interval string",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "interval"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the interval in array notation or null if not a valid interval",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> parse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.notation/interval.parse'</span>)\nparse(<span class=\"hljs-string\">'3m'</span>) <span class=\"hljs-comment\">// =&gt; [2, -1, 0]</span>\nparse(<span class=\"hljs-string\">'9b'</span>) <span class=\"hljs-comment\">// =&gt; [1, -1, 1]</span>\nparse(<span class=\"hljs-string\">'-2M'</span>) <span class=\"hljs-comment\">// =&gt; [6, -1, -1]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.interval.parse"
    ]
  },
  {
    "description": "Build a string with [shorthand interval notation](https://en.wikipedia.org/wiki/Interval_(music)#Shorthand_notation)\nfrom an interval in [array notation](https://github.com/danigb/music.array.notation)\n\nThe returned string has the form: `number + quality` where number is the interval number\n(positive integer for ascending intervals, negative integer for descending intervals, never 0)\nand the quality is one of: 'M', 'm', 'P', 'd', 'A' (major, minor, perfect, dimished, augmented)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 8,
        "name": "notation.interval.str"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 9,
        "name": null
      },
      {
        "title": "param",
        "description": "the interval in array notation",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "interval"
      },
      {
        "title": "returns",
        "description": "the interval string in shorthand notation or null if not valid interval",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "var str = require('tonal.notation/cti')\nstr([1, 0, 0]) // => '2M'\nstr([1, 0, 1]) // => '9M'",
        "lineNumber": 14
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 23,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 24,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/interval.str.js",
      "code": "'use strict'\n\nvar props = require('./props')\nvar cache = {}\n\n/**\n * Build a string with [shorthand interval notation](https://en.wikipedia.org/wiki/Interval_(music)#Shorthand_notation)\n * from an interval in [array notation](https://github.com/danigb/music.array.notation)\n *\n * The returned string has the form: `number + quality` where number is the interval number\n * (positive integer for ascending intervals, negative integer for descending intervals, never 0)\n * and the quality is one of: 'M', 'm', 'P', 'd', 'A' (major, minor, perfect, dimished, augmented)\n *\n * @name notation.interval.str\n * @function\n * @param {Array} interval - the interval in array notation\n * @return {String} the interval string in shorthand notation or null if not valid interval\n *\n * @example\n * var str = require('tonal.notation/cti')\n * str([1, 0, 0]) // => '2M'\n * str([1, 0, 1]) // => '9M'\n */\nmodule.exports = function (arr) {\n  if (!Array.isArray(arr) || arr.length !== 2) return null\n  var str = '|' + arr[0] + '|' + arr[1]\n  return str in cache ? cache[str] : cache[str] = build(arr)\n}\n\nvar ALTER = {\n  P: ['dddd', 'ddd', 'dd', 'd', 'P', 'A', 'AA', 'AAA', 'AAAA'],\n  M: ['ddd', 'dd', 'd', 'm', 'M', 'A', 'AA', 'AAA', 'AAAA']\n}\nvar TYPES = 'PMMPPMM'\n\nfunction build (coord) {\n  var p = props(coord)\n  var t = TYPES[p[0]]\n\n  var dir, num, alt\n  // if its descening, invert number\n  if (p[2] < 0) {\n    dir = -1\n    num = (8 - p[0]) - 7 * (p[2] + 1)\n    alt = t === 'P' ? -p[1] : -(p[1] + 1)\n  } else {\n    dir = 1\n    num = p[0] + 1 + 7 * p[2]\n    alt = p[1]\n  }\n  var q = ALTER[t][4 + alt]\n  return dir * num + q\n}"
    },
    "name": "notation.interval.str",
    "params": [
      {
        "title": "param",
        "description": "the interval in array notation",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "interval"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the interval string in shorthand notation or null if not valid interval",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.notation/cti'</span>)\nstr([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// =&gt; '2M'</span>\nstr([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]) <span class=\"hljs-comment\">// =&gt; '9M'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.interval.str"
    ]
  },
  {
    "description": "Get a note from a string (or null if not valid note)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "notation.note"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the source",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "src"
      },
      {
        "title": "returns",
        "description": "the note in scientific notation",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "note = require('tonal.notation/note')\nnote('fx2') // => 'F##2'\nnote('bbb') // => 'Bbb'\nnote('blah') // => null",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/note.js",
      "code": "'use strict'\n\nvar parse = require('./note.parse')\nvar str = require('./note.str')\n\n/**\n * Get a note from a string (or null if not valid note)\n *\n * @name notation.note\n * @function\n * @param {String} src - the source\n * @return {String} the note in scientific notation\n *\n * @example\n * note = require('tonal.notation/note')\n * note('fx2') // => 'F##2'\n * note('bbb') // => 'Bbb'\n * note('blah') // => null\n */\nmodule.exports = function (n) { return str(parse(n)) }\n"
    },
    "name": "notation.note",
    "params": [
      {
        "title": "param",
        "description": "the source",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "src"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the note in scientific notation",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "note = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.notation/note'</span>)\nnote(<span class=\"hljs-string\">'fx2'</span>) <span class=\"hljs-comment\">// =&gt; 'F##2'</span>\nnote(<span class=\"hljs-string\">'bbb'</span>) <span class=\"hljs-comment\">// =&gt; 'Bbb'</span>\nnote(<span class=\"hljs-string\">'blah'</span>) <span class=\"hljs-comment\">// =&gt; null</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.note"
    ]
  },
  {
    "description": "Get a pitch in [coord pitch notation](https://github.com/danigb/music.array.notation)\nfrom a string in [scientific pitch notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation)\n\nThe string to parse must be in the form of: `letter[accidentals][octave]`\nThe accidentals can be up to four # (sharp) or b (flat) or two x (double sharps)\n\nThis function is cached for better performance.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 9,
        "name": "notation.note.parse"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 10,
        "name": null
      },
      {
        "title": "param",
        "description": "the string to parse",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "str"
      },
      {
        "title": "returns",
        "description": "the note in array notation or null if not valid note",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var parse = require('tonal.notation/note.parse')\nparse('C') // => [ 0 ]\nparse('c#') // => [ 8 ]\nparse('c##') // => [ 16 ]\nparse('Cx') // => [ 16 ] (double sharp)\nparse('Cb') // => [ -6 ]\nparse('db') // => [ -4 ]\nparse('G4') // => [ 2, 3, null ]\nparse('c#3') // => [ 8, -1, null ]",
        "lineNumber": 15
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 31,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/note.parse.js",
      "code": "'use strict'\n\nvar parser = require('./parser')\nvar split = require('./note.split')\nvar BASES = { C: [0, 0], D: [2, -1], E: [4, -2], F: [-1, 1], G: [1, 0], A: [3, -1], B: [5, -2] }\n\n/**\n * Get a pitch in [coord pitch notation](https://github.com/danigb/music.array.notation)\n * from a string in [scientific pitch notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation)\n *\n * The string to parse must be in the form of: `letter[accidentals][octave]`\n * The accidentals can be up to four # (sharp) or b (flat) or two x (double sharps)\n *\n * This function is cached for better performance.\n *\n * @name notation.note.parse\n * @function\n * @param {String} str - the string to parse\n * @return {Array} the note in array notation or null if not valid note\n *\n * @example\n * var parse = require('tonal.notation/note.parse')\n * parse('C') // => [ 0 ]\n * parse('c#') // => [ 8 ]\n * parse('c##') // => [ 16 ]\n * parse('Cx') // => [ 16 ] (double sharp)\n * parse('Cb') // => [ -6 ]\n * parse('db') // => [ -4 ]\n * parse('G4') // => [ 2, 3, null ]\n * parse('c#3') // => [ 8, -1, null ]\n */\nmodule.exports = parser(function (str) {\n  var m = split(str)\n  if (!m || m[5]) return null\n\n  var base = BASES[m[1].toUpperCase()]\n  var alt = m[2].replace(/x/g, '##').length\n  if (m[2][0] === 'b') alt *= -1\n  var fifths = base[0] + 7 * alt\n  if (!m[3]) return [fifths]\n  var oct = +m[3] + base[1] - 4 * alt\n  var dur = m[4] ? +(m[4].substring(1)) : null\n  return [fifths, oct, dur]\n})\n"
    },
    "name": "notation.note.parse",
    "params": [
      {
        "title": "param",
        "description": "the string to parse",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "str"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the note in array notation or null if not valid note",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> parse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.notation/note.parse'</span>)\nparse(<span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; [ 0 ]</span>\nparse(<span class=\"hljs-string\">'c#'</span>) <span class=\"hljs-comment\">// =&gt; [ 8 ]</span>\nparse(<span class=\"hljs-string\">'c##'</span>) <span class=\"hljs-comment\">// =&gt; [ 16 ]</span>\nparse(<span class=\"hljs-string\">'Cx'</span>) <span class=\"hljs-comment\">// =&gt; [ 16 ] (double sharp)</span>\nparse(<span class=\"hljs-string\">'Cb'</span>) <span class=\"hljs-comment\">// =&gt; [ -6 ]</span>\nparse(<span class=\"hljs-string\">'db'</span>) <span class=\"hljs-comment\">// =&gt; [ -4 ]</span>\nparse(<span class=\"hljs-string\">'G4'</span>) <span class=\"hljs-comment\">// =&gt; [ 2, 3, null ]</span>\nparse(<span class=\"hljs-string\">'c#3'</span>) <span class=\"hljs-comment\">// =&gt; [ 8, -1, null ]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.note.parse"
    ]
  },
  {
    "description": "Split a note string into its parts\n\nIt returns an array with:\n\n- 0: the complete string\n- 1: the note letter\n- 2: the accidentals\n- 3: the octave\n- 4: the duration\n- 5: the element name",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 12,
        "name": "notation.note.split"
      },
      {
        "title": "param",
        "description": "the string to be parsed",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "source"
      },
      {
        "title": "returns",
        "description": "the parsed parts or null if not valid note",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var split = require('tonal.notation/note.split')\nsplit('c#4') // => ['c#4', 'c', '#', '4', '', '']",
        "lineNumber": 16
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 24,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 25,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/note.split.js",
      "code": "'use strict'\n\nvar R = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)(\\/\\d+|)\\s*(.*)\\s*$/\n\n/**\n * Split a note string into its parts\n *\n * It returns an array with:\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the accidentals\n * - 3: the octave\n * - 4: the duration\n * - 5: the element name\n *\n * @name notation.note.split\n * @param {String} source - the string to be parsed\n * @return {Array} the parsed parts or null if not valid note\n *\n * @example\n * var split = require('tonal.notation/note.split')\n * split('c#4') // => ['c#4', 'c', '#', '4', '', '']\n */\nmodule.exports = function (s) { return R.exec(s) }\n"
    },
    "name": "notation.note.split",
    "params": [
      {
        "title": "param",
        "description": "the string to be parsed",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "source"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the parsed parts or null if not valid note",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> split = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.notation/note.split'</span>)\nsplit(<span class=\"hljs-string\">'c#4'</span>) <span class=\"hljs-comment\">// =&gt; ['c#4', 'c', '#', '4', '', '']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.note.split"
    ]
  },
  {
    "description": "Get [scientific pitch notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation) string\nfrom pitch in [coordinate notation]()\n\nArray length must be 1 or 3 (see array notation documentation)\n\nThe returned string format is `letter[+ accidentals][+ octave][/duration]` where the letter\nis always uppercase, and the accidentals, octave and duration are optional.\n\nThis function is memoized for better perfomance.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 11,
        "name": "notation.note.str"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 12,
        "name": null
      },
      {
        "title": "param",
        "description": "the note in array notation",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "arr"
      },
      {
        "title": "returns",
        "description": "the note in scientific notation or null if not valid note array",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "var str = require('tonal.notation/note.str')\nstr([0]) // => 'F'\nstr([0, 4]) // => null (its an interval)\nstr([0, 4, null]) // => 'F4'\nstr([0, 4, 2]) // => 'F4/2'",
        "lineNumber": 17
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 28,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 29,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/note.str.js",
      "code": "'use strict'\n\nvar props = require('./props')\nvar cache = {}\n\n/**\n * Get [scientific pitch notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation) string\n * from pitch in [coordinate notation]()\n *\n * Array length must be 1 or 3 (see array notation documentation)\n *\n * The returned string format is `letter[+ accidentals][+ octave][/duration]` where the letter\n * is always uppercase, and the accidentals, octave and duration are optional.\n *\n * This function is memoized for better perfomance.\n *\n * @name notation.note.str\n * @function\n * @param {Array} arr - the note in array notation\n * @return {String} the note in scientific notation or null if not valid note array\n *\n * @example\n * var str = require('tonal.notation/note.str')\n * str([0]) // => 'F'\n * str([0, 4]) // => null (its an interval)\n * str([0, 4, null]) // => 'F4'\n * str([0, 4, 2]) // => 'F4/2'\n */\nmodule.exports = function (arr) {\n  if (!Array.isArray(arr) || arr.length < 1 || arr.length === 2) return null\n  var str = '|' + arr[0] + '|' + arr[1] + '|' + arr[2]\n  return str in cache ? cache[str] : cache[str] = build(arr)\n}\n\nfunction accidentals (num) {\n  if (num < 0) return Array(-num + 1).join('b')\n  else if (num > 0) return Array(num + 1).join('#')\n  else return ''\n}\n\nvar LETTER = ['C', 'D', 'E', 'F', 'G', 'A', 'B']\nfunction build (coord) {\n  var p = props(coord)\n  return LETTER[p[0]] + accidentals(p[1]) + (p[2] !== null ? p[2] : '') + (p[3] !== null ? '/' + p[3] : '')\n}"
    },
    "name": "notation.note.str",
    "params": [
      {
        "title": "param",
        "description": "the note in array notation",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "arr"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the note in scientific notation or null if not valid note array",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.notation/note.str'</span>)\nstr([<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// =&gt; 'F'</span>\nstr([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>]) <span class=\"hljs-comment\">// =&gt; null (its an interval)</span>\nstr([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-literal\">null</span>]) <span class=\"hljs-comment\">// =&gt; 'F4'</span>\nstr([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>]) <span class=\"hljs-comment\">// =&gt; 'F4/2'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.note.str"
    ]
  },
  {
    "description": "Decorate coordtinate conversion functions\n\nIt helps creating functions that convert from string to pitch in coordinate format.\nBasically it does two things:\n- ensure the function only receives strings\n- memoize the result",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 8,
        "name": "notation.parser"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 9,
        "name": null
      },
      {
        "title": "example",
        "description": "var parser = require('tonal.notataion/parser')\nvar parse = parser(function (str) {\n  // str is ALWAYS a string\n  // the return value is memoized\n})",
        "lineNumber": 13
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 20,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 21,
          "column": 0
        },
        "end": {
          "line": 28,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/parser.js",
      "code": "'use strict'\n\n/**\n * Decorate coordtinate conversion functions\n *\n * It helps creating functions that convert from string to pitch in coordinate format.\n * Basically it does two things:\n * - ensure the function only receives strings\n * - memoize the result\n *\n * @name notation.parser\n * @function\n *\n * @example\n * var parser = require('tonal.notataion/parser')\n * var parse = parser(function (str) {\n *   // str is ALWAYS a string\n *   // the return value is memoized\n * })\n */\nmodule.exports = function (fn) {\n  var cache = {}\n  return function (str) {\n    if (typeof str !== 'string') return null\n    return (str in cache) ? cache[str] : cache[str] = fn(str)\n  }\n}\n"
    },
    "name": "notation.parser",
    "examples": [
      "<span class=\"hljs-keyword\">var</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.notataion/parser'</span>)\n<span class=\"hljs-keyword\">var</span> parse = parser(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) </span>{\n  <span class=\"hljs-comment\">// str is ALWAYS a string</span>\n  <span class=\"hljs-comment\">// the return value is memoized</span>\n})"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.parser"
    ]
  },
  {
    "description": "Get properties from a pitch in coordinate format\n\nThe properties is an array with the form [number, alteration, octave, duration]",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "notation.props"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 6,
        "name": null
      },
      {
        "title": "param",
        "description": "the pitch in coord format",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "array"
      },
      {
        "title": "returns",
        "description": "the pitch in property format",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var props = require('tonal.notation/props')\nprops([2, 1, 4]) // => [1, 2, 4]",
        "lineNumber": 11
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 20,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 21,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/props.js",
      "code": "'use strict'\n\n// Map from number of fifths to interval number (0-index) and octave\n// -1 = fourth, 0 = unison, 1 = fifth, 2 = second, 3 = sixth...\nvar BASES = [[3, 1], [0, 0], [4, 0], [1, -1], [5, -1], [2, -2], [6, -2], [3, -3]]\n\n/**\n * Get properties from a pitch in coordinate format\n *\n * The properties is an array with the form [number, alteration, octave, duration]\n *\n * @name notation.props\n * @function\n * @param {Array} array - the pitch in coord format\n * @return {Array} the pitch in property format\n *\n * @example\n * var props = require('tonal.notation/props')\n * props([2, 1, 4]) // => [1, 2, 4]\n */\nmodule.exports = function (arr) {\n  if (!Array.isArray(arr)) return null\n  var index = (arr[0] + 1) % 7\n  if (index < 0) index = 7 + index\n  var base = BASES[index]\n  var alter = Math.floor((arr[0] + 1) / 7)\n  var oct = arr.length === 1 ? null : arr[1] - base[1] + alter * 4\n  var dur = arr[2] || null\n  return [base[0], alter, oct, dur]\n}\n"
    },
    "name": "notation.props",
    "params": [
      {
        "title": "param",
        "description": "the pitch in coord format",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "array"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the pitch in property format",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> props = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.notation/props'</span>)\nprops([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>]) <span class=\"hljs-comment\">// =&gt; [1, 2, 4]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.props"
    ]
  },
  {
    "description": "Get a pitch in coordinate format from properties",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "notation.props.coord"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the pitch in property format",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "prop"
      },
      {
        "title": "returns",
        "description": "the pitch in coordinate format",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 13,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/props.coord.js",
      "code": "'use strict'\n\n// map from pitch number to number of fifths and octaves\nvar BASES = [ [0, 0], [2, -1], [4, -2], [-1, 1], [1, 0], [3, -1], [5, -2] ]\n\n/**\n * Get a pitch in coordinate format from properties\n *\n * @name notation.props.coord\n * @function\n * @param {Array} prop - the pitch in property format\n * @return {Array} the pitch in coordinate format\n */\nmodule.exports = function (p) {\n  var base = BASES[p[0]]\n  if (p.length === 2) return [base[0] + 7 * p[1]]\n  return [p[3] * (base[0] + 7 * p[1]), p[3] * (p[2] + base[1] - 4 * p[1])]\n}\n"
    },
    "name": "notation.props.coord",
    "params": [
      {
        "title": "param",
        "description": "the pitch in property format",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "prop"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the pitch in coordinate format",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.props.coord"
    ]
  },
  {
    "description": "Roman to coordinate: convert from [roman numerals](https://en.wikipedia.org/wiki/Roman_numeral_analysis)\nto [pitch coordinates]()",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 4,
        "name": "notation.roman.parser"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 5,
        "name": null
      },
      {
        "title": "param",
        "description": "the roman numeral string",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "str"
      },
      {
        "title": "returns",
        "description": "a coord or null if not valid roman numeral literal",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var parse = require('tonal.notation/roman.parser')\nparse('V') // => [1]\nparse('bII') // => [-5]",
        "lineNumber": 10
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 9,
        "column": 0
      },
      "end": {
        "line": 22,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 23,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/roman.parse.js",
      "code": "'use strict'\n\nvar parser = require('./parser')\nvar split = require('./roman.split')\nvar coord = require('./props.coord')\n// roman numberals to pitch property number\nvar NUM = {i: 0, ii: 1, iii: 2, iv: 3, v: 4, vi: 5, vii: 6}\n\n/**\n * Roman to coordinate: convert from [roman numerals](https://en.wikipedia.org/wiki/Roman_numeral_analysis)\n * to [pitch coordinates]()\n *\n * @name notation.roman.parser\n * @function\n * @param {String} str - the roman numeral string\n * @return {Array} a coord or null if not valid roman numeral literal\n *\n * @example\n * var parse = require('tonal.notation/roman.parser')\n * parse('V') // => [1]\n * parse('bII') // => [-5]\n */\nmodule.exports = parser(function (str) {\n  var m = split(str)\n  if (!m || m[3]) return null\n  var num = NUM[m[2].toLowerCase()]\n  var alt = m[1].length\n  if (m[1][0] === 'b') alt = -alt\n  return coord([num, alt])\n})\n"
    },
    "name": "notation.roman.parser",
    "params": [
      {
        "title": "param",
        "description": "the roman numeral string",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "str"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "a coord or null if not valid roman numeral literal",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> parse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.notation/roman.parser'</span>)\nparse(<span class=\"hljs-string\">'V'</span>) <span class=\"hljs-comment\">// =&gt; [1]</span>\nparse(<span class=\"hljs-string\">'bII'</span>) <span class=\"hljs-comment\">// =&gt; [-5]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.roman.parser"
    ]
  },
  {
    "description": "Split a roman numeral string into its parts.\n\nReturns an array contains:\n\n- 0: the complete string\n- 1: the accidentals\n- 2: the roman numeral\n- 3: the structure name",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 10,
        "name": "notation.roman.split"
      },
      {
        "title": "param",
        "description": "the string to parse",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "source"
      },
      {
        "title": "returns",
        "description": "array - the string parts",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "split('bVIIMaj9') // => ['bVIIMaj9', 'b', 'VII', 'Maj9']",
        "lineNumber": 14
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 21,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.notation/roman.split.js",
      "code": "'use strict'\n\nvar R = /^\\s*(b|bb|#|##|)(IV|III|II|I|VII|VI|V|iv|iii|ii|i|vii|vi|v)\\s*(.*)\\s*$/\n\n/**\n * Split a roman numeral string into its parts.\n *\n * Returns an array contains:\n *\n * - 0: the complete string\n * - 1: the accidentals\n * - 2: the roman numeral\n * - 3: the structure name\n *\n * @name notation.roman.split\n * @param {String} source - the string to parse\n * @return {Array} array - the string parts\n *\n * @example\n * split('bVIIMaj9') // => ['bVIIMaj9', 'b', 'VII', 'Maj9']\n */\nmodule.exports = function (s) { return R.exec(s) }\n"
    },
    "name": "notation.roman.split",
    "params": [
      {
        "title": "param",
        "description": "the string to parse",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "source"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "array - the string parts",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "split(<span class=\"hljs-string\">'bVIIMaj9'</span>) <span class=\"hljs-comment\">// =&gt; ['bVIIMaj9', 'b', 'VII', 'Maj9']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "notation.roman.split"
    ]
  },
  {
    "description": "Get a note from a string (or null if the string is not a valid note).\nIn tonal a note is represented by a string with a note in scientific notation.\n\nThis is an alias of `notation.note`",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 6,
        "name": "note"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 7,
        "name": null
      },
      {
        "title": "param",
        "description": "the source",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "src"
      },
      {
        "title": "returns",
        "description": "the note in scientific notation",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "note = require('tonal.note')\nnote('fx2') // => 'F##2'\nnote('bbb') // => 'Bbb'\nnote('blah') // => null",
        "lineNumber": 12
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.note/note.js",
      "code": "'use strict'\n\n/**\n * Get a note from a string (or null if the string is not a valid note).\n * In tonal a note is represented by a string with a note in scientific notation.\n *\n * This is an alias of `notation.note`\n *\n * @name note\n * @function\n * @param {String} src - the source\n * @return {String} the note in scientific notation\n *\n * @example\n * note = require('tonal.note')\n * note('fx2') // => 'F##2'\n * note('bbb') // => 'Bbb'\n * note('blah') // => null\n */\nmodule.exports = require('tonal.notation/note')\n"
    },
    "name": "note",
    "params": [
      {
        "title": "param",
        "description": "the source",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "src"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the note in scientific notation",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "note = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.note'</span>)\nnote(<span class=\"hljs-string\">'fx2'</span>) <span class=\"hljs-comment\">// =&gt; 'F##2'</span>\nnote(<span class=\"hljs-string\">'bbb'</span>) <span class=\"hljs-comment\">// =&gt; 'Bbb'</span>\nnote(<span class=\"hljs-string\">'blah'</span>) <span class=\"hljs-comment\">// =&gt; null</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "note"
    ]
  },
  {
    "description": "Get the interval between two notes\n\nIf one or both notes are pitch classes, a simple ascending interval is returned\n\nThis function is an alias of `tonal.distance`",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 7,
        "name": "note.distance"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 8,
        "name": null
      },
      {
        "title": "param",
        "description": "the first note",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "from"
      },
      {
        "title": "param",
        "description": "the other note",
        "lineNumber": 11,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "to"
      },
      {
        "title": "returns",
        "description": "the interval between them",
        "lineNumber": 12,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "var distance = require('tonal.note/distance')\ndistance('C2', 'D3') // => '9M'\ndistance('D2', 'C2') // => '-2M'\ndistance('D', 'C') // => '7m'",
        "lineNumber": 14
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.note/distance.js",
      "code": "module.exports = require('tonal.distance')\n"
    },
    "name": "note.distance",
    "params": [
      {
        "title": "param",
        "description": "the first note",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "from"
      },
      {
        "title": "param",
        "description": "the other note",
        "lineNumber": 11,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "to"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the interval between them",
        "lineNumber": 12,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> distance = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.note/distance'</span>)\ndistance(<span class=\"hljs-string\">'C2'</span>, <span class=\"hljs-string\">'D3'</span>) <span class=\"hljs-comment\">// =&gt; '9M'</span>\ndistance(<span class=\"hljs-string\">'D2'</span>, <span class=\"hljs-string\">'C2'</span>) <span class=\"hljs-comment\">// =&gt; '-2M'</span>\ndistance(<span class=\"hljs-string\">'D'</span>, <span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; '7m'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "note.distance"
    ]
  },
  {
    "description": "Get the enharmonics of a note. It returns an array of three elements: the\nbelow enharmonic, the note, and the upper enharmonic",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 4,
        "name": "note.enharmonics"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 5,
        "name": null
      },
      {
        "title": "param",
        "description": "the pitch to get the enharmonics from",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "pitch"
      },
      {
        "title": "returns",
        "description": "an array of pitches ordered by distance to the given one",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "enharmonics = require('tonal.note/enharmonics')\nenharmonics('C') // => ['B#', 'C', 'Dbb']\nenharmonics('A') // => ['G##', 'A', 'Bbb']\nenharmonics('C#4') // => ['B##3', 'C#4' 'Db4']\nenharmonics('Db') // => ['C#', 'Db', 'Ebbb'])",
        "lineNumber": 10
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 8,
        "column": 0
      },
      "end": {
        "line": 23,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 24,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.note/enharmonics.js",
      "code": "'use strict'\n\nvar transpose = require('./transpose')\n\nvar ASC = [-12, 7] // dimished second\nvar DESC = [12, -7] // descending dimished second\n\n/**\n * Get the enharmonics of a note. It returns an array of three elements: the\n * below enharmonic, the note, and the upper enharmonic\n *\n * @name note.enharmonics\n * @function\n * @param {String} pitch - the pitch to get the enharmonics from\n * @return {Array} an array of pitches ordered by distance to the given one\n *\n * @example\n * enharmonics = require('tonal.note/enharmonics')\n * enharmonics('C') // => ['B#', 'C', 'Dbb']\n * enharmonics('A') // => ['G##', 'A', 'Bbb']\n * enharmonics('C#4') // => ['B##3', 'C#4' 'Db4']\n * enharmonics('Db') // => ['C#', 'Db', 'Ebbb'])\n */\nmodule.exports = function (pitch) {\n  var enharmonics = []\n  enharmonics.push(transpose(DESC, pitch))\n  enharmonics.push(pitch)\n  enharmonics.push(transpose(ASC, pitch))\n  return enharmonics\n}\n"
    },
    "name": "note.enharmonics",
    "params": [
      {
        "title": "param",
        "description": "the pitch to get the enharmonics from",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "pitch"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "an array of pitches ordered by distance to the given one",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "enharmonics = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.note/enharmonics'</span>)\nenharmonics(<span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; ['B#', 'C', 'Dbb']</span>\nenharmonics(<span class=\"hljs-string\">'A'</span>) <span class=\"hljs-comment\">// =&gt; ['G##', 'A', 'Bbb']</span>\nenharmonics(<span class=\"hljs-string\">'C#4'</span>) <span class=\"hljs-comment\">// =&gt; ['B##3', 'C#4' 'Db4']</span>\nenharmonics(<span class=\"hljs-string\">'Db'</span>) <span class=\"hljs-comment\">// =&gt; ['C#', 'Db', 'Ebbb'])</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "note.enharmonics"
    ]
  },
  {
    "description": "Get the pitch frequency in herzs with custom concert tuning\n\nThis function is currified so it can be partially applied (see examples)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "note.freq"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 6,
        "name": null
      },
      {
        "title": "param",
        "description": "the frequency of A4 (null means 440)",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Float"
        },
        "name": "tuning"
      },
      {
        "title": "param",
        "description": "the note name",
        "lineNumber": 9,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      },
      {
        "title": "returns",
        "description": "the frequency of the note",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "Float"
        }
      },
      {
        "title": "example",
        "description": "note.freq(null, 'A4') // => 440\nnote.freq(444, 'A4') // => 444",
        "lineNumber": 12
      },
      {
        "title": "example",
        "description": "// partially applied\n['A4', 'A#4', 'B5'].map(note.freq(440)) // => [440, ...]\nvar baroque = note.freq(415)\nbaroque('A3') // => 207.5",
        "lineNumber": 16
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 25,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 37,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.note/freq.js",
      "code": "'use strict'\n\nvar midi = require('./midi')\n\n/**\n * Get the pitch frequency in herzs with custom concert tuning\n *\n * This function is currified so it can be partially applied (see examples)\n *\n * @name note.freq\n * @function\n * @param {Float} tuning - the frequency of A4 (null means 440)\n * @param {String|Array} note - the note name\n * @return {Float} the frequency of the note\n *\n * @example\n * note.freq(null, 'A4') // => 440\n * note.freq(444, 'A4') // => 444\n *\n * @example\n * // partially applied\n * ['A4', 'A#4', 'B5'].map(note.freq(440)) // => [440, ...]\n * var baroque = note.freq(415)\n * baroque('A3') // => 207.5\n */\nmodule.exports = function freq (tuning, pitch) {\n  tuning = tuning || 440\n  if (arguments.length > 1) return freq(tuning)(pitch)\n\n  return function (p) {\n    if (!isNaN(p)) return p\n    var m = midi(p)\n    if (!m) return null\n    return Math.pow(2, (m - 69) / 12) * tuning\n  }\n}\n"
    },
    "name": "note.freq",
    "params": [
      {
        "title": "param",
        "description": "the frequency of A4 (null means 440)",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Float"
        },
        "name": "tuning"
      },
      {
        "title": "param",
        "description": "the note name",
        "lineNumber": 9,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the frequency of the note",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "Float"
        }
      }
    ],
    "examples": [
      "note.freq(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'A4'</span>) <span class=\"hljs-comment\">// =&gt; 440</span>\nnote.freq(<span class=\"hljs-number\">444</span>, <span class=\"hljs-string\">'A4'</span>) <span class=\"hljs-comment\">// =&gt; 444</span>",
      "<span class=\"hljs-comment\">// partially applied</span>\n[<span class=\"hljs-string\">'A4'</span>, <span class=\"hljs-string\">'A#4'</span>, <span class=\"hljs-string\">'B5'</span>].map(note.freq(<span class=\"hljs-number\">440</span>)) <span class=\"hljs-comment\">// =&gt; [440, ...]</span>\n<span class=\"hljs-keyword\">var</span> baroque = note.freq(<span class=\"hljs-number\">415</span>)\nbaroque(<span class=\"hljs-string\">'A3'</span>) <span class=\"hljs-comment\">// =&gt; 207.5</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "note.freq"
    ]
  },
  {
    "description": "Get the note name (in scientific notation) of the given midi number\n\nIt uses MIDI's [Tuning Standard](https://en.wikipedia.org/wiki/MIDI_Tuning_Standard)\nwhere A4 is 69\n\nThis method doesn't take into account diatonic spelling. Always the same\npitch class is given for the same midi number.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 9,
        "name": "note.fromMidi"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 10,
        "name": null
      },
      {
        "title": "param",
        "description": "the midi number",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        },
        "name": "midi"
      },
      {
        "title": "returns",
        "description": "the pitch",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "note.fromMidi(69) // => 'A4'",
        "lineNumber": 15
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 21,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 28,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.note/fromMidi.js",
      "code": "'use strict'\n\nvar CHROMATIC = [ 'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B' ]\n\n/**\n * Get the note name (in scientific notation) of the given midi number\n *\n * It uses MIDI's [Tuning Standard](https://en.wikipedia.org/wiki/MIDI_Tuning_Standard)\n * where A4 is 69\n *\n * This method doesn't take into account diatonic spelling. Always the same\n * pitch class is given for the same midi number.\n *\n * @name note.fromMidi\n * @function\n * @param {Integer} midi - the midi number\n * @return {String} the pitch\n *\n * @example\n * note.fromMidi(69) // => 'A4'\n */\nmodule.exports = function (midi) {\n  if (isNaN(midi) || midi < 0 || midi > 127) return null\n  var name = CHROMATIC[midi % 12]\n  var oct = Math.floor(midi / 12) - 1\n  return name + oct\n}\n"
    },
    "name": "note.fromMidi",
    "params": [
      {
        "title": "param",
        "description": "the midi number",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        },
        "name": "midi"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the pitch",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "note.fromMidi(<span class=\"hljs-number\">69</span>) <span class=\"hljs-comment\">// =&gt; 'A4'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "note.fromMidi"
    ]
  },
  {
    "description": "Get the midi number of a note\n\nThe note can be an string in scientific notation or\n[array pitch notation](https://github.com/danigb/music.array.notation)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 6,
        "name": "note.midi"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 7,
        "name": null
      },
      {
        "title": "param",
        "description": "the note in string or array notation",
        "lineNumber": 9,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      },
      {
        "title": "returns",
        "description": "the midi number",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        }
      },
      {
        "title": "example",
        "description": "midi('A4') // => 69\nmidi('A3') // => 57\nmidi([0, 2]) // => 36 (C2 in array notation)",
        "lineNumber": 12
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 20,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 21,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.note/midi.js",
      "code": "'use strict'\n\nvar parse = require('tonal.notation/note.parse')\n\n/**\n * Get the midi number of a note\n *\n * The note can be an string in scientific notation or\n * [array pitch notation](https://github.com/danigb/music.array.notation)\n *\n * @name note.midi\n * @function\n * @param {String|Array} note - the note in string or array notation\n * @return {Integer} the midi number\n *\n * @example\n * midi('A4') // => 69\n * midi('A3') // => 57\n * midi([0, 2]) // => 36 (C2 in array notation)\n */\nmodule.exports = function (note) {\n  var n = Array.isArray(note) ? note : parse(note)\n  var m = n && n.length > 1 ? n[0] * 7 + n[1] * 12 + 12 : -1\n  return m < 0 || m > 127 ? null : m\n}\n"
    },
    "name": "note.midi",
    "params": [
      {
        "title": "param",
        "description": "the note in string or array notation",
        "lineNumber": 9,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the midi number",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        }
      }
    ],
    "examples": [
      "midi(<span class=\"hljs-string\">'A4'</span>) <span class=\"hljs-comment\">// =&gt; 69</span>\nmidi(<span class=\"hljs-string\">'A3'</span>) <span class=\"hljs-comment\">// =&gt; 57</span>\nmidi([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>]) <span class=\"hljs-comment\">// =&gt; 36 (C2 in array notation)</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "note.midi"
    ]
  },
  {
    "description": "Get the [pitch class](https://en.wikipedia.org/wiki/pitch_class) of a note",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "note.pitchClass"
      },
      {
        "title": "param",
        "description": "the note",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      },
      {
        "title": "returns",
        "description": "the pitch class",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "pc = require('tonal.note/pitchClass')\npc('db3') // => 'Db'\npc('fx/4') // => 'F##'",
        "lineNumber": 7
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 16,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.note/pitchClass.js",
      "code": "'use strict'\n\nvar operation = require('tonal.pitch/operation')\n\n/**\n * Get the [pitch class](https://en.wikipedia.org/wiki/pitch_class) of a note\n *\n * @name note.pitchClass\n * @param {String|Array} note the note\n * @return {String|Array} the pitch class\n *\n * @example\n * pc = require('tonal.note/pitchClass')\n * pc('db3') // => 'Db'\n * pc('fx/4') // => 'F##'\n */\nmodule.exports = operation(function (n) {\n  return [n[0]]\n})\n"
    },
    "name": "note.pitchClass",
    "params": [
      {
        "title": "param",
        "description": "the note",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the pitch class",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "examples": [
      "pc = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.note/pitchClass'</span>)\npc(<span class=\"hljs-string\">'db3'</span>) <span class=\"hljs-comment\">// =&gt; 'Db'</span>\npc(<span class=\"hljs-string\">'fx/4'</span>) <span class=\"hljs-comment\">// =&gt; 'F##'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "note.pitchClass"
    ]
  },
  {
    "description": "Set the octave of the given note",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "note.setOctave"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the octave to set",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        },
        "name": "octave"
      },
      {
        "title": "param",
        "description": "the note",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      },
      {
        "title": "returns",
        "description": "a copy of the same note with the octave changed",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "var setOctave = require('tonal.note/setOctave')\nsetOctave('2', 'C#1') // => 'C#2'",
        "lineNumber": 10
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 16,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.note/setOctave.js",
      "code": "var curry = require('./_curry')\nvar operation = require('tonal.pitch/operation')\n\n/**\n * Set the octave of the given note\n *\n * @name note.setOctave\n * @function\n * @param {Integer} octave - the octave to set\n * @param {String|Array} note - the note\n * @return {String|Array} a copy of the same note with the octave changed\n *\n * @example\n * var setOctave = require('tonal.note/setOctave')\n * setOctave('2', 'C#1') // => 'C#2'\n */\nmodule.exports = curry(operation(function (oct, n) {\n  if (!Array.isArray(n)) return null\n  return [n[0], -Math.floor(n[0] * 7 / 12) + oct, n[2] || null]\n}))\n"
    },
    "name": "note.setOctave",
    "params": [
      {
        "title": "param",
        "description": "the octave to set",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        },
        "name": "octave"
      },
      {
        "title": "param",
        "description": "the note",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "a copy of the same note with the octave changed",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> setOctave = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.note/setOctave'</span>)\nsetOctave(<span class=\"hljs-string\">'2'</span>, <span class=\"hljs-string\">'C#1'</span>) <span class=\"hljs-comment\">// =&gt; 'C#2'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "note.setOctave"
    ]
  },
  {
    "description": "Transpose a note by an interval.\n\nThis function is currified. The orider of the parameters is indiferent.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "note.transpose"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 6,
        "name": null
      },
      {
        "title": "param",
        "description": "the interval. If its false, the note is not\ntransposed.",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "interval"
      },
      {
        "title": "param",
        "description": "the note to transpose",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      },
      {
        "title": "returns",
        "description": "the note transposed",
        "lineNumber": 11,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "var transpose = require('music.kit/note.transpose')\ntranspose('3m', 'C4') // => 'Eb4'\ntranspose('C4', '3m') // => 'Eb4'\ntranpose([1, 0, 2], [3, -1, 0]) // => [3, 0, 2]\n['C', 'D', 'E'].map(transpose('3M')) // => ['E', 'F#', 'G#']",
        "lineNumber": 13
      },
      {
        "title": "kind",
        "kind": "function"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 21,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.transpose/index.js",
      "code": "var operation = require('tonal.pitch/operation')\n\n/**\n * Transpose a note by an interval.\n *\n * This function is currified. The orider of the parameters is indiferent.\n *\n * @name note.transpose\n * @function\n * @param {String|Array} interval - the interval. If its false, the note is not\n * transposed.\n * @param {String|Array} note - the note to transpose\n * @return {String|Array} the note transposed\n *\n * @example\n * var transpose = require('music.kit/note.transpose')\n * transpose('3m', 'C4') // => 'Eb4'\n * transpose('C4', '3m') // => 'Eb4'\n * tranpose([1, 0, 2], [3, -1, 0]) // => [3, 0, 2]\n * ['C', 'D', 'E'].map(transpose('3M')) // => ['E', 'F#', 'G#']\n */\nvar m = operation(function (i, n) {\n  if (i === false) return n\n  else if (!Array.isArray(i) || !Array.isArray(n)) return null\n  else if (i.length === 1 || n.length === 1) return [n[0] + i[0]]\n  var d = i.length === 2 && n.length === 2 ? null : n[2] || i[2]\n  return [n[0] + i[0], n[1] + i[1], d]\n})\nif (typeof module === 'object' && module.exports) module.exports = m\nif (typeof window !== 'undefined') window.transpose = m\n"
    },
    "name": "note.transpose",
    "params": [
      {
        "title": "param",
        "description": "the interval. If its false, the note is not\ntransposed.",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "interval"
      },
      {
        "title": "param",
        "description": "the note to transpose",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the note transposed",
        "lineNumber": 11,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> transpose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.kit/note.transpose'</span>)\ntranspose(<span class=\"hljs-string\">'3m'</span>, <span class=\"hljs-string\">'C4'</span>) <span class=\"hljs-comment\">// =&gt; 'Eb4'</span>\ntranspose(<span class=\"hljs-string\">'C4'</span>, <span class=\"hljs-string\">'3m'</span>) <span class=\"hljs-comment\">// =&gt; 'Eb4'</span>\ntranpose([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// =&gt; [3, 0, 2]</span>\n[<span class=\"hljs-string\">'C'</span>, <span class=\"hljs-string\">'D'</span>, <span class=\"hljs-string\">'E'</span>].map(transpose(<span class=\"hljs-string\">'3M'</span>)) <span class=\"hljs-comment\">// =&gt; ['E', 'F#', 'G#']</span>"
    ],
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "note.transpose"
    ]
  },
  {
    "description": "Transpose a note by an interval.\n\nThis is an alias of `tonal.transpose`",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "note.transpose"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 6,
        "name": null
      },
      {
        "title": "param",
        "description": "the interval. If its false, the note is not\ntransposed.",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "interval"
      },
      {
        "title": "param",
        "description": "the note to transpose",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      },
      {
        "title": "returns",
        "description": "the note transposed",
        "lineNumber": 11,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "var transpose = require('tonal.note/transpose')\ntranspose('3m', 'C4') // => 'Eb4'\ntranspose('C4', '3m') // => 'Eb4'\ntranpose([1, 0, 2], [3, -1, 0]) // => [3, 0, 2]\n['C', 'D', 'E'].map(transpose('3M')) // => ['E', 'F#', 'G#']",
        "lineNumber": 13
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.note/transpose.js",
      "code": "module.exports = require('tonal.transpose')\n"
    },
    "name": "note.transpose",
    "params": [
      {
        "title": "param",
        "description": "the interval. If its false, the note is not\ntransposed.",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "interval"
      },
      {
        "title": "param",
        "description": "the note to transpose",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "note"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the note transposed",
        "lineNumber": 11,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> transpose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.note/transpose'</span>)\ntranspose(<span class=\"hljs-string\">'3m'</span>, <span class=\"hljs-string\">'C4'</span>) <span class=\"hljs-comment\">// =&gt; 'Eb4'</span>\ntranspose(<span class=\"hljs-string\">'C4'</span>, <span class=\"hljs-string\">'3m'</span>) <span class=\"hljs-comment\">// =&gt; 'Eb4'</span>\ntranpose([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// =&gt; [3, 0, 2]</span>\n[<span class=\"hljs-string\">'C'</span>, <span class=\"hljs-string\">'D'</span>, <span class=\"hljs-string\">'E'</span>].map(transpose(<span class=\"hljs-string\">'3M'</span>)) <span class=\"hljs-comment\">// =&gt; ['E', 'F#', 'G#']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "note.transpose"
    ]
  },
  {
    "description": "Get a pitch from a string. In tonal a pitch it's a note, an interval or a\npitch class. It allows us to work with this elements in an uniform way.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 4,
        "name": "pitch"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 5,
        "name": null
      },
      {
        "title": "param",
        "description": "the string",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "source"
      },
      {
        "title": "returns",
        "description": "the pitch or null if not a valid pitch",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "var pitch = require('music.pitch')\npitch('c2') // => 'C2'\npitch('2') // => '2M'\npitch('blah') // => null",
        "lineNumber": 10
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.pitch/pitch.js",
      "code": "'use strict'\n\nvar str = require('./str')\nvar parse = require('./parse')\n/**\n * Get a pitch from a string. In tonal a pitch it's a note, an interval or a\n * pitch class. It allows us to work with this elements in an uniform way.\n *\n * @name pitch\n * @function\n * @param {String} source - the string\n * @return {String} the pitch or null if not a valid pitch\n *\n * @example\n * var pitch = require('music.pitch')\n * pitch('c2') // => 'C2'\n * pitch('2') // => '2M'\n * pitch('blah') // => null\n */\nmodule.exports = function (s) { return str(parse(s)) }\n"
    },
    "name": "pitch",
    "params": [
      {
        "title": "param",
        "description": "the string",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "source"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the pitch or null if not a valid pitch",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> pitch = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.pitch'</span>)\npitch(<span class=\"hljs-string\">'c2'</span>) <span class=\"hljs-comment\">// =&gt; 'C2'</span>\npitch(<span class=\"hljs-string\">'2'</span>) <span class=\"hljs-comment\">// =&gt; '2M'</span>\npitch(<span class=\"hljs-string\">'blah'</span>) <span class=\"hljs-comment\">// =&gt; null</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "pitch"
    ]
  },
  {
    "description": "",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 1,
        "name": "pitch.height"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 3,
        "name": null
      },
      {
        "title": "param",
        "description": "the pitch to get the height from",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "pitch"
      },
      {
        "title": "returns",
        "description": "the height of -1 if not valid note",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        }
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 11,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.pitch/height.js",
      "code": "'use strict'\n\nvar operation = require('./operation')\n\n/**\n * @name pitch.height\n *\n * @function\n * @param {String|Array} pitch - the pitch to get the height from\n * @return {Integer} the height of -1 if not valid note\n */\nmodule.exports = operation(function (p) {\n  if (!Array.isArray(p)) return -Infinity\n  var f = p[0] * 7\n  var o = p[1] || p[1] === 0 ? p[1] : -Math.floor(f / 12) - 10\n  return f + o * 12\n})\n"
    },
    "name": "pitch.height",
    "params": [
      {
        "title": "param",
        "description": "the pitch to get the height from",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "pitch"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the height of -1 if not valid note",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Integer"
        }
      }
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "pitch.height"
    ]
  },
  {
    "description": "Decorate a function to work with pitches in array notation",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "pitch.operation"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 12,
        "column": 0
      },
      "end": {
        "line": 17,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 27,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.pitch/operation.js",
      "code": "var parse = require('./parse')\nvar str = require('./str')\n\nfunction curry (fn, arity) {\n  if (arity === 1) return fn\n  return function (a, b) {\n    if (arguments.length === 1) return function (c) { return fn(a, c) }\n    return fn(a, b)\n  }\n}\n\n/**\n * Decorate a function to work with pitches in array notation\n *\n * @name pitch.operation\n * @function\n */\nmodule.exports = function (fn) {\n  return curry(function (a, b) {\n    var ac = parse(a)\n    var bc = parse(b)\n    if (!ac && !bc) return fn(a, b)\n    var v = fn(ac || a, bc || b)\n    return str(v) || v\n  }, fn.length)\n}\n"
    },
    "name": "pitch.operation",
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "pitch.operation"
    ]
  },
  {
    "description": "Convert a note or interval string to a [pitch in coord notation]()",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "pitch.parse"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the note or interval to parse",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "pitch"
      },
      {
        "title": "returns",
        "description": "the pitch in array notation",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "pitch.parse('C2') // => [0, 2, null]\npitch.parse('5P') // => [1, 0]",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 15,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.pitch/parse.js",
      "code": "var ncrd = require('tonal.notation/note.parse')\nvar icrd = require('tonal.notation/interval.parse')\n\n/**\n * Convert a note or interval string to a [pitch in coord notation]()\n *\n * @name pitch.parse\n * @function\n * @param {String} pitch - the note or interval to parse\n * @return {Array} the pitch in array notation\n *\n * @example\n * pitch.parse('C2') // => [0, 2, null]\n * pitch.parse('5P') // => [1, 0]\n */\nmodule.exports = function (n) { return ncrd(n) || icrd(n) }\n"
    },
    "name": "pitch.parse",
    "params": [
      {
        "title": "param",
        "description": "the note or interval to parse",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "pitch"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the pitch in array notation",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "pitch.parse(<span class=\"hljs-string\">'C2'</span>) <span class=\"hljs-comment\">// =&gt; [0, 2, null]</span>\npitch.parse(<span class=\"hljs-string\">'5P'</span>) <span class=\"hljs-comment\">// =&gt; [1, 0]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "pitch.parse"
    ]
  },
  {
    "description": "Simplifies a pitch. If its a note, it returns its pitch class. If its an\ninterval it returns the simplified interval",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 4,
        "name": "pitch.simplify"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 5,
        "name": null
      },
      {
        "title": "param",
        "description": "the pitch",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "pitch"
      },
      {
        "title": "returns",
        "description": "the simplified pitch",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "var simplify = require('music.kit/pitch.simplify')\nsimplify('C#4') // => 'C#'\nsimplify('9m') // => '2m'",
        "lineNumber": 10
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 16,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.pitch/simplify.js",
      "code": "var operation = require('./operation')\n\n/**\n * Simplifies a pitch. If its a note, it returns its pitch class. If its an\n * interval it returns the simplified interval\n *\n * @name pitch.simplify\n * @function\n * @param {String|Array} pitch - the pitch\n * @return {String|Array} the simplified pitch\n *\n * @example\n * var simplify = require('music.kit/pitch.simplify')\n * simplify('C#4') // => 'C#'\n * simplify('9m') // => '2m'\n */\nmodule.exports = operation(function (p) {\n  if (!Array.isArray(p)) return null\n  return p.length === 2 ? [p[0], -Math.floor(p[0] * 7 / 12)] : [p[0]]\n})\n"
    },
    "name": "pitch.simplify",
    "params": [
      {
        "title": "param",
        "description": "the pitch",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "pitch"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the simplified pitch",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> simplify = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.kit/pitch.simplify'</span>)\nsimplify(<span class=\"hljs-string\">'C#4'</span>) <span class=\"hljs-comment\">// =&gt; 'C#'</span>\nsimplify(<span class=\"hljs-string\">'9m'</span>) <span class=\"hljs-comment\">// =&gt; '2m'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "pitch.simplify"
    ]
  },
  {
    "description": "Convert a pitch in coordinate notation to string. It deals with notes, pitch\nclasses and intervals.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 4,
        "name": "pitch.str"
      },
      {
        "title": "funistron",
        "description": null,
        "lineNumber": 5
      },
      {
        "title": "param",
        "description": "the pitch in array notation",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "pitch"
      },
      {
        "title": "returns",
        "description": "the pitch string",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "var pitch = require('music.pitch')\n// pitch class\npitch.str([0]) // => 'C'\n// interval\npitch.str([0, 0]) // => '1P'\n// note\npitch.str([0, 2, 4]) // => 'C2/4'",
        "lineNumber": 9
      },
      {
        "title": "example",
        "description": "// require the funistron only\nvar str = require('music.pitch/str')",
        "lineNumber": 18
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 25,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 27,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.pitch/str.js",
      "code": "var nstr = require('tonal.notation/note.str')\nvar istr = require('tonal.notation/interval.str')\n\n/**\n * Convert a pitch in coordinate notation to string. It deals with notes, pitch\n * classes and intervals.\n *\n * @name pitch.str\n * @funistron\n * @param {Array} pitch - the pitch in array notation\n * @return {String} the pitch string\n *\n * @example\n * var pitch = require('music.pitch')\n * // pitch class\n * pitch.str([0]) // => 'C'\n * // interval\n * pitch.str([0, 0]) // => '1P'\n * // note\n * pitch.str([0, 2, 4]) // => 'C2/4'\n *\n * @example\n * // require the funistron only\n * var str = require('music.pitch/str')\n */\nmodule.exports = function (n) { return nstr(n) || istr(n) }\n"
    },
    "name": "pitch.str",
    "params": [
      {
        "title": "param",
        "description": "the pitch in array notation",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "pitch"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the pitch string",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> pitch = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.pitch'</span>)\n<span class=\"hljs-comment\">// pitch class</span>\npitch.str([<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// =&gt; 'C'</span>\n<span class=\"hljs-comment\">// interval</span>\npitch.str([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// =&gt; '1P'</span>\n<span class=\"hljs-comment\">// note</span>\npitch.str([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]) <span class=\"hljs-comment\">// =&gt; 'C2/4'</span>",
      "<span class=\"hljs-comment\">// require the funistron only</span>\n<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.pitch/str'</span>)"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "pitch.str"
    ]
  },
  {
    "description": "Get a scale by name using a dictionary.\n\nYou can get scale notes by passing a tonic or the scale intervals by passing\n`false` as tonic\n\nThere is two ways to get a scale:\n\n- With tonic included in name: `scale('C major')`\n- With name and tonic: `scale('major', 'C')`\n\nThis function can be partially applied (see examples)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 13,
        "name": "scale"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 14,
        "name": null
      },
      {
        "title": "param",
        "description": "the scale name (optionally can include the tonic)",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      },
      {
        "title": "returns",
        "description": "a data object with the scale properties",
        "lineNumber": 17,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      },
      {
        "title": "example",
        "description": "var scale = require('music.scale')\n// with name and tonic\nscale('major', 'C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n// with tonic inside the name\nscale('C major') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n// partially applied\nvar major = scale('major')\nmajor('C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']",
        "lineNumber": 19
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 33,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 34,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.scale/scale.js",
      "code": "'use strict'\n\nvar scales = require('./dictionary')\nvar getter = require('tonal.dictionary/getter')\n\n/**\n * Get a scale by name using a dictionary.\n *\n * You can get scale notes by passing a tonic or the scale intervals by passing\n * `false` as tonic\n *\n * There is two ways to get a scale:\n *\n * - With tonic included in name: `scale('C major')`\n * - With name and tonic: `scale('major', 'C')`\n *\n * This function can be partially applied (see examples)\n *\n * @name scale\n * @function\n * @param {String} name - the scale name (optionally can include the tonic)\n * @return {Object} a data object with the scale properties\n *\n * @example\n * var scale = require('music.scale')\n * // with name and tonic\n * scale('major', 'C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n * // with tonic inside the name\n * scale('C major') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n * // partially applied\n * var major = scale('major')\n * major('C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n */\nmodule.exports = getter(scales)\n"
    },
    "name": "scale",
    "params": [
      {
        "title": "param",
        "description": "the scale name (optionally can include the tonic)",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "name"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "a data object with the scale properties",
        "lineNumber": 17,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> scale = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.scale'</span>)\n<span class=\"hljs-comment\">// with name and tonic</span>\nscale(<span class=\"hljs-string\">'major'</span>, <span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E', 'F', 'G', 'A', 'B']</span>\n<span class=\"hljs-comment\">// with tonic inside the name</span>\nscale(<span class=\"hljs-string\">'C major'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E', 'F', 'G', 'A', 'B']</span>\n<span class=\"hljs-comment\">// partially applied</span>\n<span class=\"hljs-keyword\">var</span> major = scale(<span class=\"hljs-string\">'major'</span>)\nmajor(<span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E', 'F', 'G', 'A', 'B']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "scale"
    ]
  },
  {
    "description": "Get the (triad) chord name of a scale",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "scale.chord"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the scale notes",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "String"
            }
          ]
        },
        "name": "scale"
      },
      {
        "title": "returns",
        "description": "the chord name",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "scale.chords('c d e f g a b') // => 'CM'",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 17,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.scale/chord.js",
      "code": "'use strict'\n\nvar build = require('./build')\nvar type = require('tonal.chord/type')\nvar select = require('tonal.gamut/select')\n\n/**\n * Get the (triad) chord name of a scale\n *\n * @name scale.chord\n * @function\n * @param {Array|String} scale - the scale notes\n * @return {String} the chord name\n *\n * @example\n * scale.chords('c d e f g a b') // => 'CM'\n */\nmodule.exports = function (notes) {\n  var chord = select('1 3 5 7', build(notes, null))\n  var t = type(chord)\n  return t ? chord[0] + t : null\n}\n"
    },
    "name": "scale.chord",
    "params": [
      {
        "title": "param",
        "description": "the scale notes",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "String"
            }
          ]
        },
        "name": "scale"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the chord name",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "scale.chords(<span class=\"hljs-string\">'c d e f g a b'</span>) <span class=\"hljs-comment\">// =&gt; 'CM'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "scale.chord"
    ]
  },
  {
    "description": "Scale dictionary",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "scale.dictionary"
      },
      {
        "title": "kind",
        "description": null,
        "lineNumber": 4,
        "kind": "constant"
      },
      {
        "title": "example",
        "description": "var scales = require('music.kit/scale/dictionary')\nscales['major'] // => { name: 'major', intervals: ['1', '2', ...], aliases: [] }",
        "lineNumber": 6
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 15,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.scale/dictionary.js",
      "code": "'use strict'\n\nvar data = require('./scales.json')\nvar dictionary = require('tonal.dictionary')\n\n/**\n * Scale dictionary\n *\n * @name scale.dictionary\n * @kind constant\n *\n * @example\n * var scales = require('music.kit/scale/dictionary')\n * scales['major'] // => { name: 'major', intervals: ['1', '2', ...], aliases: [] }\n */\nmodule.exports = dictionary(data)\n"
    },
    "name": "scale.dictionary",
    "kind": "constant",
    "examples": [
      "<span class=\"hljs-keyword\">var</span> scales = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.kit/scale/dictionary'</span>)\nscales[<span class=\"hljs-string\">'major'</span>] <span class=\"hljs-comment\">// =&gt; { name: 'major', intervals: ['1', '2', ...], aliases: [] }</span>"
    ],
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "scale.dictionary"
    ]
  },
  {
    "description": "Get all modes of a scale",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "scale.modes"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the scale",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "scale"
      },
      {
        "title": "param",
        "description": "the modes of the scale",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "all"
      },
      {
        "title": "example",
        "description": "var modes = require('music.kit/scale/modes')\nmodes('C D E') // => [ ['C', 'D', 'E'], ['D', 'E', 'C'], ['E', 'C', 'D'] ]",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 17,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 24,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.scale/modes.js",
      "code": "'use strict'\n\nvar rotate = require('tonal.gamut/rotate')\nvar build = require('./build')\n\n/**\n * Get all modes of a scale\n *\n * @name scale.modes\n * @function\n * @param {Array} scale - the scale\n * @param {Array} all the modes of the scale\n *\n * @example\n * var modes = require('music.kit/scale/modes')\n * modes('C D E') // => [ ['C', 'D', 'E'], ['D', 'E', 'C'], ['E', 'C', 'D'] ]\n */\nmodule.exports = function (notes) {\n  var s = build(notes, null)\n  return s.map(function (n, i) {\n    return rotate(i, s)\n  })\n}\n"
    },
    "name": "scale.modes",
    "params": [
      {
        "title": "param",
        "description": "the scale",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "scale"
      },
      {
        "title": "param",
        "description": "the modes of the scale",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "all"
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> modes = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.kit/scale/modes'</span>)\nmodes(<span class=\"hljs-string\">'C D E'</span>) <span class=\"hljs-comment\">// =&gt; [ ['C', 'D', 'E'], ['D', 'E', 'C'], ['E', 'C', 'D'] ]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "scale.modes"
    ]
  },
  {
    "description": "Given a list of notes get the scale names",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "scale.names"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": null
      },
      {
        "title": "param",
        "description": "the scale notes",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "notes"
      },
      {
        "title": "returns",
        "description": "an array of scale names or all known scale names if no arguments provided",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "// get all known scale names\nscale.names() // => ['major', 'minor', ... ] (89 names)\nscale.names('D E F G A B C') [ 'D dorian' ]\nscale.names('D E F G A B C') [ 'D dorian' ]",
        "lineNumber": 9
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.scale/names.js",
      "code": "'use strict'\n\nvar names = require('tonal.dictionary/names')\nvar scales = require('./dictionary')\n\n/**\n * Given a list of notes get the scale names\n *\n * @name scale.names\n * @function\n * @param {String|Array} notes - the scale notes\n * @return {Array} an array of scale names or all known scale names if no arguments provided\n *\n * @example\n * // get all known scale names\n * scale.names() // => ['major', 'minor', ... ] (89 names)\n * scale.names('D E F G A B C') [ 'D dorian' ]\n * scale.names('D E F G A B C') [ 'D dorian' ]\n */\nmodule.exports = names(scales, ' ')\n"
    },
    "name": "scale.names",
    "params": [
      {
        "title": "param",
        "description": "the scale notes",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "notes"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "an array of scale names or all known scale names if no arguments provided",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-comment\">// get all known scale names</span>\nscale.names() <span class=\"hljs-comment\">// =&gt; ['major', 'minor', ... ] (89 names)</span>\nscale.names(<span class=\"hljs-string\">'D E F G A B C'</span>) [ <span class=\"hljs-string\">'D dorian'</span> ]\nscale.names(<span class=\"hljs-string\">'D E F G A B C'</span>) [ <span class=\"hljs-string\">'D dorian'</span> ]"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "scale.names"
    ]
  },
  {
    "description": "Create a scale from a gamut and a tonic. A scale is a set of notes or\nintervals ordered by frequency with a tonic.\n\nA source can be a list of intervals or notes.\n\nThe tonic can be a note (with or without octave), false to get the scale\nintervals or null to set the first note of the source as tonic\n\nThis function is currified, so you can partially apply the function passing\none parameter instead of two (see example)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 12,
        "name": "scale.scale"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 13,
        "name": null
      },
      {
        "title": "param",
        "description": "the list of intervals or notes",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "source"
      },
      {
        "title": "param",
        "description": "the tonic of the scale",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "tonic"
      },
      {
        "title": "returns",
        "description": "the list of notes",
        "lineNumber": 17,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var scale = require('music.kit/scale/scale')\n// basic usage\nscale('1 2 3 5 6', 'G') // => ['G', 'A', 'B', 'D', 'E']\nscale('1 2 3 5 6', false) // => ['1P', '2M', '3M', '5P', '6M']",
        "lineNumber": 19
      },
      {
        "title": "example",
        "description": "// uses first note of the source as tonic\nscale('c d e f g a b c d e', null) // => []",
        "lineNumber": 25
      },
      {
        "title": "example",
        "description": "// partially applied\nvar dorian = scale('D E F G A B C')\ndorian('C4') // => ['C4', 'D4', 'Eb4', 'F4', 'G4', 'A4', 'Bb4']",
        "lineNumber": 29
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 9,
        "column": 0
      },
      "end": {
        "line": 41,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 42,
          "column": 0
        },
        "end": {
          "line": 58,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.scale/build.js",
      "code": "'use strict'\n\nvar operation = require('tonal.gamut/operation')\nvar harmonics = require('tonal.gamut/harmonics')\nvar split = require('tonal.gamut/split')\nvar set = require('tonal.gamut/set')\nvar transpose = require('tonal.transpose')\n\n/**\n * Create a scale from a gamut and a tonic. A scale is a set of notes or\n * intervals ordered by frequency with a tonic.\n *\n * A source can be a list of intervals or notes.\n\n * The tonic can be a note (with or without octave), false to get the scale\n * intervals or null to set the first note of the source as tonic\n *\n * This function is currified, so you can partially apply the function passing\n * one parameter instead of two (see example)\n *\n * @name scale.scale\n * @function\n * @param {Array} source - the list of intervals or notes\n * @param {String} tonic - the tonic of the scale\n * @return {Array} the list of notes\n *\n * @example\n * var scale = require('music.kit/scale/scale')\n * // basic usage\n * scale('1 2 3 5 6', 'G') // => ['G', 'A', 'B', 'D', 'E']\n * scale('1 2 3 5 6', false) // => ['1P', '2M', '3M', '5P', '6M']\n *\n * @example\n * // uses first note of the source as tonic\n * scale('c d e f g a b c d e', null) // => []\n *\n * @example\n * // partially applied\n * var dorian = scale('D E F G A B C')\n * dorian('C4') // => ['C4', 'D4', 'Eb4', 'F4', 'G4', 'A4', 'Bb4']\n */\nmodule.exports = function b (notes, tonic) {\n  if (arguments.length === 1) return function (t) { return b(notes, t) }\n  notes = split(notes)\n  var len = notes.length\n  if (len === 0) return []\n  var intervals = operation(function (gamut) {\n    tonic = !tonic && tonic !== false ? gamut[0] : tonic\n    var s = set(gamut)\n    var i = indexOf(gamut[0][0], s, len)\n    var ordered = s.slice(i, len).concat(s.slice(0, i))\n    return harmonics(ordered)\n  }, notes)\n  tonic = !tonic && tonic !== false ? notes[0] : tonic\n  return intervals.map(transpose(tonic))\n}\n\nfunction indexOf (p, g, l) {\n  for (var i = 0; i < l; i++) {\n    if (g[i][0] === p) return i\n  }\n}"
    },
    "name": "scale.scale",
    "params": [
      {
        "title": "param",
        "description": "the list of intervals or notes",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "source"
      },
      {
        "title": "param",
        "description": "the tonic of the scale",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "tonic"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the list of notes",
        "lineNumber": 17,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> scale = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.kit/scale/scale'</span>)\n<span class=\"hljs-comment\">// basic usage</span>\nscale(<span class=\"hljs-string\">'1 2 3 5 6'</span>, <span class=\"hljs-string\">'G'</span>) <span class=\"hljs-comment\">// =&gt; ['G', 'A', 'B', 'D', 'E']</span>\nscale(<span class=\"hljs-string\">'1 2 3 5 6'</span>, <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// =&gt; ['1P', '2M', '3M', '5P', '6M']</span>",
      "<span class=\"hljs-comment\">// uses first note of the source as tonic</span>\nscale(<span class=\"hljs-string\">'c d e f g a b c d e'</span>, <span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// =&gt; []</span>",
      "<span class=\"hljs-comment\">// partially applied</span>\n<span class=\"hljs-keyword\">var</span> dorian = scale(<span class=\"hljs-string\">'D E F G A B C'</span>)\ndorian(<span class=\"hljs-string\">'C4'</span>) <span class=\"hljs-comment\">// =&gt; ['C4', 'D4', 'Eb4', 'F4', 'G4', 'A4', 'Bb4']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "scale.scale"
    ]
  },
  {
    "description": "Select notes from a scale using degree numbers.\n\nThe resulting array will contain the notes in the same order as degrees.\nIf a given degree is not present in the scale, the result will contain a\nnull in that position.\n\nThis function is currified so it can be partially applied.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 9,
        "name": "scale.select"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 10,
        "name": null
      },
      {
        "title": "param",
        "description": "the degrees numbers list",
        "lineNumber": 12,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "String"
            }
          ]
        },
        "name": "degrees"
      },
      {
        "title": "param",
        "description": "the scale notes",
        "lineNumber": 13,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "String"
            }
          ]
        },
        "name": "scale"
      },
      {
        "title": "returns",
        "description": "the melodic pattern (or null if not present)",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "var select = require('music.kit/scale.select')\n// basic usage:\nselect('1 3 5', 'C D E F G A B') // => [ 'C', 'E', 'G' ]\n// order matters:\nselect('1 5 2 6', 'C D E F G A B') // => [ 'C', 'G', 'D', 'A' ]\n// not found degrees are null:\nselect('1 2 6', 'C D E F G') // => [ 'C', 'D', null ]\n// numbers bigger than 7 are transposed one octave or more:\nselect('1 8 15', 'C2 D2 E2') // => ['C2', 'C3', 'C4']\n// partially applied:\nvar triad = select('1 3 5')\ntriad('C D E F G A B') // => ['C', 'E', 'G']",
        "lineNumber": 16
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 11,
        "column": 0
      },
      "end": {
        "line": 39,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 40,
          "column": 0
        },
        "end": {
          "line": 62,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.scale/select.js",
      "code": "'use strict'\n\nvar split = require('tonal.gamut/split')\nvar operation = require('tonal.gamut/operation')\nvar build = require('./build')\nvar transpose = require('tonal.transpose')\n\n// STEPS: each number of fifths (base F) has a step number (base 0)\nvar STEPS = [3, 0, 4, 1, 5, 2, 6]\n\n/**\n * Select notes from a scale using degree numbers.\n *\n * The resulting array will contain the notes in the same order as degrees.\n * If a given degree is not present in the scale, the result will contain a\n * null in that position.\n *\n * This function is currified so it can be partially applied.\n *\n * @name scale.select\n * @function\n * @param {Array|String} degrees - the degrees numbers list\n * @param {Array|String} scale - the scale notes\n * @return {Array} the melodic pattern (or null if not present)\n *\n * @example\n * var select = require('music.kit/scale.select')\n * // basic usage:\n * select('1 3 5', 'C D E F G A B') // => [ 'C', 'E', 'G' ]\n * // order matters:\n * select('1 5 2 6', 'C D E F G A B') // => [ 'C', 'G', 'D', 'A' ]\n * // not found degrees are null:\n * select('1 2 6', 'C D E F G') // => [ 'C', 'D', null ]\n * // numbers bigger than 7 are transposed one octave or more:\n * select('1 8 15', 'C2 D2 E2') // => ['C2', 'C3', 'C4']\n * // partially applied:\n * var triad = select('1 3 5')\n * triad('C D E F G A B') // => ['C', 'E', 'G']\n */\nmodule.exports = function select (pttn, notes) {\n  if (arguments.length === 2) return select(pttn)(notes)\n\n  return operation(function (g) {\n    var nums = split(pttn).map(function (n) { return +n - 1 })\n    var index = []\n    build(g, false).forEach(function (item) {\n      var fifths = (item[0] + 1) % 7\n      index[STEPS[fifths]] = item\n    })\n    var selected = nums.map(function (n) {\n      var i = index[n % 7]\n      // up an octave if number > 7\n      if (i && n > 6) {\n        i = i.slice()\n        i[1] = i[1] + Math.floor(n / 7)\n      }\n      return i\n    })\n    return selected.map(transpose(g[0]))\n  })\n}\n"
    },
    "name": "scale.select",
    "params": [
      {
        "title": "param",
        "description": "the degrees numbers list",
        "lineNumber": 12,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "String"
            }
          ]
        },
        "name": "degrees"
      },
      {
        "title": "param",
        "description": "the scale notes",
        "lineNumber": 13,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "String"
            }
          ]
        },
        "name": "scale"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the melodic pattern (or null if not present)",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> select = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.kit/scale.select'</span>)\n<span class=\"hljs-comment\">// basic usage:</span>\nselect(<span class=\"hljs-string\">'1 3 5'</span>, <span class=\"hljs-string\">'C D E F G A B'</span>) <span class=\"hljs-comment\">// =&gt; [ 'C', 'E', 'G' ]</span>\n<span class=\"hljs-comment\">// order matters:</span>\nselect(<span class=\"hljs-string\">'1 5 2 6'</span>, <span class=\"hljs-string\">'C D E F G A B'</span>) <span class=\"hljs-comment\">// =&gt; [ 'C', 'G', 'D', 'A' ]</span>\n<span class=\"hljs-comment\">// not found degrees are null:</span>\nselect(<span class=\"hljs-string\">'1 2 6'</span>, <span class=\"hljs-string\">'C D E F G'</span>) <span class=\"hljs-comment\">// =&gt; [ 'C', 'D', null ]</span>\n<span class=\"hljs-comment\">// numbers bigger than 7 are transposed one octave or more:</span>\nselect(<span class=\"hljs-string\">'1 8 15'</span>, <span class=\"hljs-string\">'C2 D2 E2'</span>) <span class=\"hljs-comment\">// =&gt; ['C2', 'C3', 'C4']</span>\n<span class=\"hljs-comment\">// partially applied:</span>\n<span class=\"hljs-keyword\">var</span> triad = select(<span class=\"hljs-string\">'1 3 5'</span>)\ntriad(<span class=\"hljs-string\">'C D E F G A B'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'E', 'G']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "scale.select"
    ]
  },
  {
    "description": "Create a set: a set is a list of uniq pitch classes or simplified intervals\nin ascending pitch order\n\nThis is an alias of `gamut.set`",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 6,
        "name": "set"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 7,
        "name": null
      },
      {
        "title": "param",
        "description": "the note list",
        "lineNumber": 9,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "notes"
      },
      {
        "title": "returns",
        "description": "the set",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "var set = require('music.set/set')\nset('E7 C2 e D5 c1') // => ['C', 'D', 'E']\nset('11 10 9') // => [ '2M', '3M', '4P' ]",
        "lineNumber": 12
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 18,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.set/set.js",
      "code": "'use strict'\n\n/**\n * Create a set: a set is a list of uniq pitch classes or simplified intervals\n * in ascending pitch order\n *\n * This is an alias of `gamut.set`\n *\n * @name set\n * @function\n * @param {String|Array} notes - the note list\n * @return {String|Array} the set\n *\n * @example\n * var set = require('music.set/set')\n * set('E7 C2 e D5 c1') // => ['C', 'D', 'E']\n * set('11 10 9') // => [ '2M', '3M', '4P' ]\n */\nmodule.exports = require('tonal.gamut/set')\n"
    },
    "name": "set",
    "params": [
      {
        "title": "param",
        "description": "the note list",
        "lineNumber": 9,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "notes"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the set",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> set = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'music.set/set'</span>)\nset(<span class=\"hljs-string\">'E7 C2 e D5 c1'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E']</span>\nset(<span class=\"hljs-string\">'11 10 9'</span>) <span class=\"hljs-comment\">// =&gt; [ '2M', '3M', '4P' ]</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "set"
    ]
  },
  {
    "description": "Get a set binary number\n\nA set binary number is a 12 digit binary, each digit representing a step\nin the chromatic scale. For example, `101010000000` is `['1P', '2M', '3M']`\n\nThe set binary number is very useful to check if two sets are equal or\ncontains same intervals (regarding of note names)",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 9,
        "name": "set.binary"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 10,
        "name": null
      },
      {
        "title": "param",
        "description": "a gamut",
        "lineNumber": 12,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "TypeApplication",
              "expression": {
                "type": "NameExpression",
                "name": "Array"
              },
              "applications": [
                {
                  "type": "NameExpression",
                  "name": "Array"
                }
              ]
            }
          ]
        },
        "name": "source"
      },
      {
        "title": "returns",
        "description": "the binary number",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "var binary = require('tonal.set/binary')\nbinary('C2 E4 D3') // => '101010000000'",
        "lineNumber": 15
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 8,
        "column": 0
      },
      "end": {
        "line": 25,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.set/binary.js",
      "code": "'use strict'\n\nvar height = require('tonal.pitch/height')\nvar operation = require('tonal.gamut/operation')\nvar harmonics = require('tonal.gamut/harmonics')\nvar set = require('./set')\n\n/**\n * Get a set binary number\n *\n * A set binary number is a 12 digit binary, each digit representing a step\n * in the chromatic scale. For example, `101010000000` is `['1P', '2M', '3M']`\n *\n * The set binary number is very useful to check if two sets are equal or\n * contains same intervals (regarding of note names)\n *\n * @name set.binary\n * @function\n * @param {String|Array|Array<Array>} source - a gamut\n * @return {String} the binary number\n *\n * @example\n * var binary = require('tonal.set/binary')\n * binary('C2 E4 D3') // => '101010000000'\n */\nmodule.exports = operation(function (gamut) {\n  var number = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  var intervals = set(harmonics(gamut))\n  var semitones = intervals.map(height)\n  semitones.forEach(function (s) {\n    number[s] = 1\n  })\n  return number.join('')\n})\n"
    },
    "name": "set.binary",
    "params": [
      {
        "title": "param",
        "description": "a gamut",
        "lineNumber": 12,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "TypeApplication",
              "expression": {
                "type": "NameExpression",
                "name": "Array"
              },
              "applications": [
                {
                  "type": "NameExpression",
                  "name": "Array"
                }
              ]
            }
          ]
        },
        "name": "source"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the binary number",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> binary = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.set/binary'</span>)\nbinary(<span class=\"hljs-string\">'C2 E4 D3'</span>) <span class=\"hljs-comment\">// =&gt; '101010000000'</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "set.binary"
    ]
  },
  {
    "description": "Get a set from a binary set number and (optionally) a tonic. If the tonic is\na note, you get a pitch set. If its false you get a interval set.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 4,
        "name": "set.fromBinary"
      },
      {
        "title": "function",
        "description": null,
        "lineNumber": 5,
        "name": null
      },
      {
        "title": "param",
        "description": "the gamut",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "TypeApplication",
              "expression": {
                "type": "NameExpression",
                "name": "Array"
              },
              "applications": [
                {
                  "type": "NameExpression",
                  "name": "Array"
                }
              ]
            }
          ]
        },
        "name": "source"
      },
      {
        "title": "param",
        "description": "the first note of the set or false to get the intervals",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "tonic"
      },
      {
        "title": "returns",
        "description": "the set pitch classes (note names without octaves)",
        "lineNumber": 9,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "String"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "var fromBinary = require('tonal.set/fromBinary')\n// use a 12 digit binary number:\nfromBinary('101011010101', 'C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n// or its decimal equivalent:\nfromBinary(2773, 'C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n// get the interval set by passing `false` as tonic:\nfromBinary(2773, false) // => ['1P', '2M', '3M', '4', '5', '6M', '7M']",
        "lineNumber": 11
      },
      {
        "title": "kind",
        "kind": "function"
      },
      {
        "title": "memberof",
        "description": "module"
      },
      {
        "title": "static"
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 25,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 41,
          "column": 0
        }
      },
      "file": "/Users/Dani/Code/Tonal/tonal/node_modules/tonal.set/fromBinary.js",
      "code": "'use strict'\n\nvar transpose = require('tonal.transpose')\n\nvar INTERVALS = ['1P', '2m', '2M', '3m', '3M', '4', '4#', '5', '6m', '6M', '7m', '7M']\n\n/**\n * Get a set from a binary set number and (optionally) a tonic. If the tonic is\n * a note, you get a pitch set. If its false you get a interval set.\n *\n * @name set.fromBinary\n * @function\n * @param {String|Array|Array<Array>} source - the gamut\n * @param {String} tonic - the first note of the set or false to get the intervals\n * @return {Array<String>} the set pitch classes (note names without octaves)\n *\n * @example\n * var fromBinary = require('tonal.set/fromBinary')\n * // use a 12 digit binary number:\n * fromBinary('101011010101', 'C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n * // or its decimal equivalent:\n * fromBinary(2773, 'C') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n * // get the interval set by passing `false` as tonic:\n * fromBinary(2773, false) // => ['1P', '2M', '3M', '4', '5', '6M', '7M']\n */\nmodule.exports = function f (number, tonic) {\n  if (arguments.length === 1) return function (t) { return f(number, t) }\n  if (/^1[01]{11}$/.test(number)) number = parseInt(number, 2)\n  else if (typeof number !== 'number') return []\n  var binary = ((number % 2048) + 2048).toString(2)\n\n  var set = []\n  for (var i = 0; i < 12; i++) {\n    if (binary.charAt(i) === '1') {\n      if (i === 6 && binary.charAt(5) === '1') set.push('5b')\n      else set.push(INTERVALS[i])\n    }\n  }\n  return tonic === false ? set : set.map(transpose(tonic))\n}\n"
    },
    "name": "set.fromBinary",
    "params": [
      {
        "title": "param",
        "description": "the gamut",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "String"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "TypeApplication",
              "expression": {
                "type": "NameExpression",
                "name": "Array"
              },
              "applications": [
                {
                  "type": "NameExpression",
                  "name": "Array"
                }
              ]
            }
          ]
        },
        "name": "source"
      },
      {
        "title": "param",
        "description": "the first note of the set or false to get the intervals",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "tonic"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "the set pitch classes (note names without octaves)",
        "lineNumber": 9,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "String"
            }
          ]
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> fromBinary = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tonal.set/fromBinary'</span>)\n<span class=\"hljs-comment\">// use a 12 digit binary number:</span>\nfromBinary(<span class=\"hljs-string\">'101011010101'</span>, <span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E', 'F', 'G', 'A', 'B']</span>\n<span class=\"hljs-comment\">// or its decimal equivalent:</span>\nfromBinary(<span class=\"hljs-number\">2773</span>, <span class=\"hljs-string\">'C'</span>) <span class=\"hljs-comment\">// =&gt; ['C', 'D', 'E', 'F', 'G', 'A', 'B']</span>\n<span class=\"hljs-comment\">// get the interval set by passing `false` as tonic:</span>\nfromBinary(<span class=\"hljs-number\">2773</span>, <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// =&gt; ['1P', '2M', '3M', '4', '5', '6M', '7M']</span>"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "set.fromBinary"
    ]
  }
]